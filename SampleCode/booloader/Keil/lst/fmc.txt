; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_CheckAllOne||, CODE, READONLY, ALIGN=2

                  FMC_CheckAllOne PROC
;;;849      */
;;;850    uint32_t  FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count)
000000  b530              PUSH     {r4,r5,lr}
;;;851    {
;;;852        uint32_t  ret = READ_ALLONE_CMD_FAIL;
;;;853    
;;;854        FMC->ISPSTS = 0x80UL;   /* clear check all one bit */
000002  4a12              LDR      r2,|L1.76|
000004  4604              MOV      r4,r0                 ;851
000006  2380              MOVS     r3,#0x80
000008  f04f30ff          MOV      r0,#0xffffffff        ;852
00000c  6413              STR      r3,[r2,#0x40]
;;;855    
;;;856        FMC->ISPCMD   = FMC_ISPCMD_RUN_ALL1;
00000e  2328              MOVS     r3,#0x28
000010  60d3              STR      r3,[r2,#0xc]
;;;857        FMC->ISPADDR  = u32addr;
000012  6054              STR      r4,[r2,#4]
;;;858        FMC->ISPDAT   = u32count;
000014  6091              STR      r1,[r2,#8]
;;;859        FMC->ISPTRG   = FMC_ISPTRG_ISPGO_Msk;
000016  2501              MOVS     r5,#1
000018  6115              STR      r5,[r2,#0x10]
                  |L1.26|
;;;860    
;;;861        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c11              LDR      r1,[r2,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L1.26|
;;;862    
;;;863        do
;;;864        {
;;;865            FMC->ISPCMD = FMC_ISPCMD_READ_ALL1;
000020  2308              MOVS     r3,#8
                  |L1.34|
000022  60d3              STR      r3,[r2,#0xc]
;;;866            FMC->ISPADDR    = u32addr;
000024  6054              STR      r4,[r2,#4]
;;;867            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000026  6115              STR      r5,[r2,#0x10]
                  |L1.40|
;;;868            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000028  6c11              LDR      r1,[r2,#0x40]
00002a  07c9              LSLS     r1,r1,#31
00002c  d1fc              BNE      |L1.40|
;;;869        }
;;;870        while (FMC->ISPDAT == 0UL);
00002e  6891              LDR      r1,[r2,#8]
000030  2900              CMP      r1,#0
000032  d0f6              BEQ      |L1.34|
;;;871    
;;;872        if (FMC->ISPDAT == READ_ALLONE_YES)
000034  6893              LDR      r3,[r2,#8]
000036  4906              LDR      r1,|L1.80|
000038  428b              CMP      r3,r1
00003a  d100              BNE      |L1.62|
;;;873        {
;;;874            ret = FMC->ISPDAT;
00003c  6890              LDR      r0,[r2,#8]
                  |L1.62|
;;;875        }
;;;876    
;;;877        if (FMC->ISPDAT == READ_ALLONE_NOT)
00003e  6891              LDR      r1,[r2,#8]
000040  4b04              LDR      r3,|L1.84|
000042  4299              CMP      r1,r3
000044  d100              BNE      |L1.72|
;;;878        {
;;;879            ret = FMC->ISPDAT;
000046  6890              LDR      r0,[r2,#8]
                  |L1.72|
;;;880        }
;;;881    
;;;882        return ret;
;;;883    }
000048  bd30              POP      {r4,r5,pc}
;;;884    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x4000c000
                  |L1.80|
                          DCD      0xa11fffff
                  |L1.84|
                          DCD      0xa1100000

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;32       */
;;;33     void FMC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;34     {
;;;35         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210101          BIC      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;36     }
00000a  4770              BX       lr
;;;37     
                          ENDP

                  |L2.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_CompareSPKey||, CODE, READONLY, ALIGN=2

                  FMC_CompareSPKey PROC
;;;987      */
;;;988    int32_t  FMC_CompareSPKey(uint32_t key[3])
000000  4911              LDR      r1,|L3.72|
;;;989    {
000002  4602              MOV      r2,r0
;;;990        uint32_t  u32KeySts;
;;;991        int32_t   ret = 0;
000004  2000              MOVS     r0,#0
;;;992    
;;;993        if (FMC->KPKEYSTS & FMC_KPKEYSTS_FORBID_Msk)
000006  6e0b              LDR      r3,[r1,#0x60]
000008  071b              LSLS     r3,r3,#28
00000a  d500              BPL      |L3.14|
;;;994        {
;;;995            /* FMC_CompareSPKey - FORBID!  */
;;;996            ret = -1;
00000c  1e40              SUBS     r0,r0,#1
                  |L3.14|
;;;997        }
;;;998    
;;;999        if (!(FMC->KPKEYSTS & FMC_KPKEYSTS_KEYLOCK_Msk))
00000e  6e0b              LDR      r3,[r1,#0x60]
000010  079b              LSLS     r3,r3,#30
000012  d402              BMI      |L3.26|
;;;1000       {
;;;1001           /* FMC_CompareSPKey - key is not locked!  */
;;;1002           ret = -3;
000014  f06f0002          MVN      r0,#2
                  |L3.24|
;;;1003       }
;;;1004   
;;;1005       if (ret == 0)
;;;1006       {
;;;1007           FMC->KPKEY0 = key[0];
;;;1008           FMC->KPKEY1 = key[1];
;;;1009           FMC->KPKEY2 = key[2];
;;;1010           FMC->KPKEYTRG = FMC_KPKEYTRG_KPKEYGO_Msk | FMC_KPKEYTRG_TCEN_Msk;
;;;1011   
;;;1012           while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
;;;1013   
;;;1014           u32KeySts = FMC->KPKEYSTS;
;;;1015   
;;;1016           if (!(u32KeySts & FMC_KPKEYSTS_KEYMATCH_Msk))
;;;1017           {
;;;1018               /* Key mismatched! */
;;;1019               ret = -2;
;;;1020           }
;;;1021           else if (u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk)
;;;1022           {
;;;1023               /* Key matched, but still be locked! */
;;;1024               ret = -2;
;;;1025           }
;;;1026       }
;;;1027       return ret;
;;;1028   }
000018  4770              BX       lr
                  |L3.26|
00001a  2800              CMP      r0,#0                 ;1005
00001c  d1fc              BNE      |L3.24|
00001e  6813              LDR      r3,[r2,#0]            ;1007
000020  650b              STR      r3,[r1,#0x50]         ;1007
000022  6853              LDR      r3,[r2,#4]            ;1008
000024  654b              STR      r3,[r1,#0x54]         ;1008
000026  6892              LDR      r2,[r2,#8]            ;1009
000028  658a              STR      r2,[r1,#0x58]         ;1009
00002a  2203              MOVS     r2,#3                 ;1010
00002c  65ca              STR      r2,[r1,#0x5c]         ;1010
                  |L3.46|
00002e  6e0a              LDR      r2,[r1,#0x60]         ;1012
000030  07d2              LSLS     r2,r2,#31             ;1012
000032  d1fc              BNE      |L3.46|
000034  6e09              LDR      r1,[r1,#0x60]         ;1014
000036  f06f0301          MVN      r3,#1                 ;1019
00003a  074a              LSLS     r2,r1,#29             ;1016
00003c  d501              BPL      |L3.66|
00003e  0789              LSLS     r1,r1,#30             ;1021
000040  d5ea              BPL      |L3.24|
                  |L3.66|
000042  4618              MOV      r0,r3                 ;1019
000044  4770              BX       lr
;;;1029   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x4000c000

                          AREA ||i.FMC_ConfigXOM||, CODE, READONLY, ALIGN=2

                  FMC_ConfigXOM PROC
;;;50       */
;;;51     int32_t FMC_ConfigXOM(uint32_t u32XomNum, uint32_t u32XomBase, uint8_t u8XomPage)
000000  b5f0              PUSH     {r4-r7,lr}
;;;52     {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  4603              MOV      r3,r0
;;;53         int32_t  ret = 0;
;;;54     
;;;55         if(u32XomNum >= 4UL)
000008  2804              CMP      r0,#4
00000a  d302              BCC      |L4.18|
;;;56         {
;;;57             ret = -2;
00000c  f06f0001          MVN      r0,#1
                  |L4.16|
;;;58         }
;;;59     
;;;60         if(ret == 0)
;;;61         {
;;;62             ret = FMC_GetXOMState(u32XomNum);
;;;63         }
;;;64     
;;;65         if(ret == 0)
;;;66         {
;;;67             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;68             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u);
;;;69             FMC->ISPDAT = u32XomBase;
;;;70             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;71             while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;72     
;;;73             if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;74             {
;;;75                 FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;76                 ret = -1;
;;;77             }
;;;78         }
;;;79     
;;;80         if(ret == 0)
;;;81         {
;;;82             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;83             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x04u);
;;;84             FMC->ISPDAT = u8XomPage;
;;;85             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;86             while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;87     
;;;88             if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;89             {
;;;90                 FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;91                 ret = -1;
;;;92             }
;;;93         }
;;;94     
;;;95         if(ret == 0)
;;;96         {
;;;97             FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;98             FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x08u);
;;;99             FMC->ISPDAT = 0u;
;;;100            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;101            while(FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) {}
;;;102    
;;;103            if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;104            {
;;;105                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;106                ret = -1;
;;;107            }
;;;108        }
;;;109    
;;;110        return ret;
;;;111    }
000010  bdf0              POP      {r4-r7,pc}
                  |L4.18|
000012  f7fffffe          BL       FMC_GetXOMState
000016  2800              CMP      r0,#0                 ;62
000018  d1fa              BNE      |L4.16|
00001a  4c1c              LDR      r4,|L4.140|
00001c  2721              MOVS     r7,#0x21              ;67
00001e  60e7              STR      r7,[r4,#0xc]          ;67
000020  f44f1100          MOV      r1,#0x200000          ;68
000024  eb011103          ADD      r1,r1,r3,LSL #4       ;68
000028  6061              STR      r1,[r4,#4]            ;68
00002a  60a6              STR      r6,[r4,#8]            ;69
00002c  2601              MOVS     r6,#1                 ;70
00002e  6126              STR      r6,[r4,#0x10]         ;70
                  |L4.48|
000030  6921              LDR      r1,[r4,#0x10]         ;71
000032  07c9              LSLS     r1,r1,#31             ;71
000034  d1fc              BNE      |L4.48|
000036  6c21              LDR      r1,[r4,#0x40]         ;73
000038  f04f32ff          MOV      r2,#0xffffffff        ;76
00003c  0649              LSLS     r1,r1,#25             ;73
00003e  d41f              BMI      |L4.128|
000040  2800              CMP      r0,#0                 ;80
000042  d1e5              BNE      |L4.16|
000044  60e7              STR      r7,[r4,#0xc]          ;82
000046  4912              LDR      r1,|L4.144|
000048  eb011103          ADD      r1,r1,r3,LSL #4       ;83
00004c  6061              STR      r1,[r4,#4]            ;83
00004e  60a5              STR      r5,[r4,#8]            ;84
000050  6126              STR      r6,[r4,#0x10]         ;85
                  |L4.82|
000052  6921              LDR      r1,[r4,#0x10]         ;86
000054  07c9              LSLS     r1,r1,#31             ;86
000056  d1fc              BNE      |L4.82|
000058  6c21              LDR      r1,[r4,#0x40]         ;88
00005a  0649              LSLS     r1,r1,#25             ;88
00005c  d410              BMI      |L4.128|
00005e  2800              CMP      r0,#0                 ;95
000060  d1d6              BNE      |L4.16|
000062  60e7              STR      r7,[r4,#0xc]          ;97
000064  490a              LDR      r1,|L4.144|
000066  1d09              ADDS     r1,r1,#4              ;98
000068  eb011103          ADD      r1,r1,r3,LSL #4       ;98
00006c  6061              STR      r1,[r4,#4]            ;98
00006e  2100              MOVS     r1,#0                 ;99
000070  60a1              STR      r1,[r4,#8]            ;99
000072  6126              STR      r6,[r4,#0x10]         ;100
                  |L4.116|
000074  6921              LDR      r1,[r4,#0x10]         ;101
000076  07c9              LSLS     r1,r1,#31             ;101
000078  d1fc              BNE      |L4.116|
00007a  6c21              LDR      r1,[r4,#0x40]         ;103
00007c  0649              LSLS     r1,r1,#25             ;103
00007e  d5c7              BPL      |L4.16|
                  |L4.128|
000080  6c20              LDR      r0,[r4,#0x40]         ;105
000082  f0400040          ORR      r0,r0,#0x40           ;105
000086  6420              STR      r0,[r4,#0x40]         ;105
000088  4610              MOV      r0,r2                 ;106
00008a  bdf0              POP      {r4-r7,pc}
;;;112    
                          ENDP

                  |L4.140|
                          DCD      0x4000c000
                  |L4.144|
                          DCD      0x00200004

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;120      */
;;;121    int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4602              MOV      r2,r0
;;;122    {
;;;123        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;124    
;;;125        if (u32PageAddr == FMC_SPROM_BASE)
000004  f5b21f00          CMP      r2,#0x200000
000008  d012              BEQ      |L5.48|
;;;126        {
;;;127            return FMC_Erase_SPROM();
;;;128        }
;;;129    
;;;130        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
00000a  490a              LDR      r1,|L5.52|
00000c  2322              MOVS     r3,#0x22
00000e  60cb              STR      r3,[r1,#0xc]
;;;131        FMC->ISPADDR = u32PageAddr;
000010  604a              STR      r2,[r1,#4]
;;;132        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L5.22|
;;;133    
;;;134        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L5.22|
;;;135    
;;;136        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L5.46|
;;;137        {
;;;138            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  f0400040          ORR      r0,r0,#0x40
000028  6008              STR      r0,[r1,#0]
;;;139            ret = -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L5.46|
;;;140        }
;;;141    
;;;142        return ret;
;;;143    }
00002e  4770              BX       lr
                  |L5.48|
000030  f7ffbffe          B.W      FMC_Erase_SPROM
;;;144    
                          ENDP

                  |L5.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_EraseXOM||, CODE, READONLY, ALIGN=2

                  FMC_EraseXOM PROC
;;;233      */
;;;234    int32_t FMC_EraseXOM(uint32_t u32XomNum)
000000  b530              PUSH     {r4,r5,lr}
;;;235    {
;;;236        uint32_t u32Addr;
;;;237        int32_t i32Active, err = 0;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;235
;;;238    
;;;239        if(u32XomNum >= 4UL)
000006  2804              CMP      r0,#4
000008  d301              BCC      |L6.14|
;;;240        {
;;;241            err = -2;
00000a  1ead              SUBS     r5,r5,#2
00000c  e025              B        |L6.90|
                  |L6.14|
;;;242        }
;;;243    
;;;244        if(err == 0)
;;;245        {
;;;246            i32Active = FMC_GetXOMState(u32XomNum);
00000e  f7fffffe          BL       FMC_GetXOMState
;;;247    
;;;248            if(i32Active)
;;;249            {
;;;250                switch(u32XomNum)
;;;251                {
;;;252                case 0u:
;;;253                    u32Addr = (FMC->XOMR0STS & 0xFFFFFF00u) >> 8u;
;;;254                    break;
;;;255                case 1u:
;;;256                    u32Addr = (FMC->XOMR1STS & 0xFFFFFF00u) >> 8u;
;;;257                    break;
;;;258                case 2u:
;;;259                    u32Addr = (FMC->XOMR2STS & 0xFFFFFF00u) >> 8u;
;;;260                    break;
;;;261                case 3u:
;;;262                    u32Addr = (FMC->XOMR3STS & 0xFFFFFF00u) >> 8u;
;;;263                    break;
;;;264                default:
;;;265                    break;
;;;266                }
;;;267                FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
;;;268                FMC->ISPADDR = u32Addr;
;;;269                FMC->ISPDAT = 0x55aa03u;
;;;270                FMC->ISPTRG = 0x1u;
;;;271    #if ISBEN
;;;272                __ISB();
;;;273    #endif
;;;274                while(FMC->ISPTRG) {}
;;;275    
;;;276                /* Check ISPFF flag to know whether erase OK or fail. */
;;;277                if(FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;278                {
;;;279                    FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;280                    err = -1;
000012  f04f32ff          MOV      r2,#0xffffffff
000016  b1f8              CBZ      r0,|L6.88|
000018  4814              LDR      r0,|L6.108|
00001a  b134              CBZ      r4,|L6.42|
00001c  2c01              CMP      r4,#1                 ;250
00001e  d007              BEQ      |L6.48|
000020  2c02              CMP      r4,#2                 ;250
000022  d01c              BEQ      |L6.94|
000024  2c03              CMP      r4,#3                 ;250
000026  d106              BNE      |L6.54|
000028  e01c              B        |L6.100|
                  |L6.42|
00002a  f8d010d0          LDR      r1,[r0,#0xd0]         ;253
00002e  e001              B        |L6.52|
                  |L6.48|
000030  f8d010d4          LDR      r1,[r0,#0xd4]         ;256
                  |L6.52|
000034  0a0b              LSRS     r3,r1,#8              ;253
                  |L6.54|
000036  2122              MOVS     r1,#0x22              ;267
000038  60c1              STR      r1,[r0,#0xc]          ;267
00003a  6043              STR      r3,[r0,#4]            ;268
00003c  490c              LDR      r1,|L6.112|
00003e  6081              STR      r1,[r0,#8]            ;269
000040  2101              MOVS     r1,#1                 ;270
000042  6101              STR      r1,[r0,#0x10]         ;270
                  |L6.68|
000044  6901              LDR      r1,[r0,#0x10]         ;274
000046  2900              CMP      r1,#0                 ;274
000048  d1fc              BNE      |L6.68|
00004a  6801              LDR      r1,[r0,#0]            ;277
00004c  0649              LSLS     r1,r1,#25             ;277
00004e  d504              BPL      |L6.90|
000050  6801              LDR      r1,[r0,#0]            ;279
000052  f0410140          ORR      r1,r1,#0x40           ;279
000056  6001              STR      r1,[r0,#0]            ;279
                  |L6.88|
;;;281                }
;;;282            }
;;;283            else
;;;284            {
;;;285                err = -1;
000058  4615              MOV      r5,r2
                  |L6.90|
;;;286            }
;;;287        }
;;;288        return err;
00005a  4628              MOV      r0,r5
;;;289    }
00005c  bd30              POP      {r4,r5,pc}
                  |L6.94|
00005e  f8d010d8          LDR      r1,[r0,#0xd8]         ;259
000062  e7e7              B        |L6.52|
                  |L6.100|
000064  f8d010dc          LDR      r1,[r0,#0xdc]         ;262
000068  e7e4              B        |L6.52|
;;;290    
                          ENDP

00006a  0000              DCW      0x0000
                  |L6.108|
                          DCD      0x4000c000
                  |L6.112|
                          DCD      0x0055aa03

                          AREA ||i.FMC_Erase_Bank||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Bank PROC
;;;203      */
;;;204    int32_t FMC_Erase_Bank(uint32_t u32BankAddr)
000000  4602              MOV      r2,r0
;;;205    {
;;;206        int32_t  ret = 0;
;;;207    
;;;208        FMC->ISPCMD = FMC_ISPCMD_BANK_ERASE;
000002  490a              LDR      r1,|L7.44|
000004  2000              MOVS     r0,#0                 ;206
000006  2323              MOVS     r3,#0x23
000008  60cb              STR      r3,[r1,#0xc]
;;;209        FMC->ISPADDR = u32BankAddr;
00000a  604a              STR      r2,[r1,#4]
;;;210        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L7.16|
;;;211    
;;;212        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L7.16|
;;;213    
;;;214        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L7.40|
;;;215        {
;;;216            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;217            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L7.40|
;;;218        }
;;;219        return ret;
;;;220    }
000028  4770              BX       lr
;;;221    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_Block||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Block PROC
;;;178      */
;;;179    int32_t FMC_Erase_Block(uint32_t u32BlockAddr)
000000  4602              MOV      r2,r0
;;;180    {
;;;181        int32_t  ret = 0;
;;;182    
;;;183        FMC->ISPCMD = FMC_ISPCMD_BLOCK_ERASE;
000002  490a              LDR      r1,|L8.44|
000004  2000              MOVS     r0,#0                 ;181
000006  2325              MOVS     r3,#0x25
000008  60cb              STR      r3,[r1,#0xc]
;;;184        FMC->ISPADDR = u32BlockAddr;
00000a  604a              STR      r2,[r1,#4]
;;;185        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2201              MOVS     r2,#1
00000e  610a              STR      r2,[r1,#0x10]
                  |L8.16|
;;;186    
;;;187        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000010  690a              LDR      r2,[r1,#0x10]
000012  07d2              LSLS     r2,r2,#31
000014  d1fc              BNE      |L8.16|
;;;188    
;;;189        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000016  680a              LDR      r2,[r1,#0]
000018  0652              LSLS     r2,r2,#25
00001a  d505              BPL      |L8.40|
;;;190        {
;;;191            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00001c  6808              LDR      r0,[r1,#0]
00001e  f0400040          ORR      r0,r0,#0x40
000022  6008              STR      r0,[r1,#0]
;;;192            ret = -1;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L8.40|
;;;193        }
;;;194        return ret;
;;;195    }
000028  4770              BX       lr
;;;196    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;151      */
;;;152    int32_t FMC_Erase_SPROM(void)
000000  490b              LDR      r1,|L9.48|
;;;153    {
;;;154        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;155    
;;;156        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000004  2222              MOVS     r2,#0x22
000006  60ca              STR      r2,[r1,#0xc]
;;;157        FMC->ISPADDR = FMC_SPROM_BASE;
000008  f44f1200          MOV      r2,#0x200000
00000c  604a              STR      r2,[r1,#4]
;;;158        FMC->ISPDAT = 0x0055AA03UL;
00000e  4a09              LDR      r2,|L9.52|
000010  608a              STR      r2,[r1,#8]
;;;159        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L9.22|
;;;160    
;;;161        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L9.22|
;;;162    
;;;163        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L9.46|
;;;164        {
;;;165            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  f0400040          ORR      r0,r0,#0x40
000028  6008              STR      r0,[r1,#0]
;;;166            ret = -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L9.46|
;;;167        }
;;;168        return ret;
;;;169    }
00002e  4770              BX       lr
;;;170    
                          ENDP

                  |L9.48|
                          DCD      0x4000c000
                  |L9.52|
                          DCD      0x0055aa03

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;326      */
;;;327    int32_t FMC_GetBootSource (void)
000000  4806              LDR      r0,|L10.28|
;;;328    {
;;;329        if (FMC->ISPCTL & FMC_ISPCTL_BL_Msk)
000002  6801              LDR      r1,[r0,#0]
000004  03c9              LSLS     r1,r1,#15
000006  d501              BPL      |L10.12|
;;;330        {
;;;331            return 2;
000008  2002              MOVS     r0,#2
;;;332        }
;;;333        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
;;;334        {
;;;335            return 1;
;;;336        }
;;;337        return 0;
;;;338    }
00000a  4770              BX       lr
                  |L10.12|
00000c  6800              LDR      r0,[r0,#0]            ;333
00000e  0780              LSLS     r0,r0,#30             ;333
000010  d501              BPL      |L10.22|
000012  2001              MOVS     r0,#1                 ;335
000014  4770              BX       lr
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;337
000018  4770              BX       lr
;;;339    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;811      */
;;;812    uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  ea400201          ORR      r2,r0,r1
;;;813    {
;;;814        uint32_t   ret;
;;;815    
;;;816        if ((u32addr % 512UL) || (u32count % 512UL))
000004  05d2              LSLS     r2,r2,#23
000006  d002              BEQ      |L11.14|
;;;817        {
;;;818            ret = 0xFFFFFFFF;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;819        }
;;;820        else
;;;821        {
;;;822            FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;823            FMC->ISPADDR = u32addr;
;;;824            FMC->ISPDAT  = u32count;
;;;825            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;826    
;;;827            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;828    
;;;829            FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;830            FMC->ISPADDR    = u32addr;
;;;831            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;832    
;;;833            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;834    
;;;835            ret = FMC->ISPDAT;
;;;836        }
;;;837    
;;;838        return ret;
;;;839    }
00000c  4770              BX       lr
                  |L11.14|
00000e  4a09              LDR      r2,|L11.52|
000010  232d              MOVS     r3,#0x2d              ;822
000012  60d3              STR      r3,[r2,#0xc]          ;822
000014  6050              STR      r0,[r2,#4]            ;823
000016  6091              STR      r1,[r2,#8]            ;824
000018  2301              MOVS     r3,#1                 ;825
00001a  6113              STR      r3,[r2,#0x10]         ;825
                  |L11.28|
00001c  6c11              LDR      r1,[r2,#0x40]         ;827
00001e  07c9              LSLS     r1,r1,#31             ;827
000020  d1fc              BNE      |L11.28|
000022  210d              MOVS     r1,#0xd               ;829
000024  60d1              STR      r1,[r2,#0xc]          ;829
000026  6050              STR      r0,[r2,#4]            ;830
000028  6113              STR      r3,[r2,#0x10]         ;831
                  |L11.42|
00002a  6c10              LDR      r0,[r2,#0x40]         ;833
00002c  07c0              LSLS     r0,r0,#31             ;833
00002e  d1fc              BNE      |L11.42|
000030  6890              LDR      r0,[r2,#8]            ;835
000032  4770              BX       lr
;;;840    
                          ENDP

                  |L11.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetXOMState||, CODE, READONLY, ALIGN=2

                  FMC_GetXOMState PROC
;;;301      */
;;;302    int32_t FMC_GetXOMState(uint32_t u32XomNum)
000000  4601              MOV      r1,r0
;;;303    {
;;;304        uint32_t u32act;
;;;305        int32_t  ret = 0;
;;;306    
;;;307        if(u32XomNum >= 4UL)
000002  2804              CMP      r0,#4
000004  d302              BCC      |L12.12|
;;;308        {
;;;309            ret = -2;
000006  f06f0001          MVN      r0,#1
;;;310        }
;;;311    
;;;312        if(ret >= 0)
;;;313        {
;;;314            u32act = (((FMC->XOMSTS) & 0xful) & (1ul << u32XomNum)) >> u32XomNum;
;;;315            ret = (int32_t)u32act;
;;;316        }
;;;317        return ret;
;;;318    }
00000a  4770              BX       lr
                  |L12.12|
00000c  4804              LDR      r0,|L12.32|
00000e  f8d000e0          LDR      r0,[r0,#0xe0]         ;314
000012  2201              MOVS     r2,#1                 ;314
000014  408a              LSLS     r2,r2,r1              ;314
000016  f002020f          AND      r2,r2,#0xf            ;314
00001a  4010              ANDS     r0,r0,r2              ;314
00001c  40c8              LSRS     r0,r0,r1              ;314
00001e  4770              BX       lr
;;;319    
                          ENDP

                  |L12.32|
                          DCD      0x4000c000

                          AREA ||i.FMC_Is_OTP_Locked||, CODE, READONLY, ALIGN=2

                  FMC_Is_OTP_Locked PROC
;;;704      */
;;;705    int32_t FMC_Is_OTP_Locked(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;706    {
;;;707        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;708    
;;;709        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L13.12|
;;;710        {
;;;711            ret = -2;
000008  1e80              SUBS     r0,r0,#2
;;;712        }
;;;713    
;;;714        if (ret == 0)
;;;715        {
;;;716            FMC->ISPCMD = FMC_ISPCMD_READ;
;;;717            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;718            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;719    
;;;720            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;721    
;;;722            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;723            {
;;;724                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;725                ret = -1;
;;;726            }
;;;727            else
;;;728            {
;;;729                if (FMC->ISPDAT != 0xFFFFFFFFUL)
;;;730                {
;;;731                    ret = 1;   /* Lock work was progrmmed. OTP was locked. */
;;;732                }
;;;733            }
;;;734        }
;;;735        return ret;
;;;736    }
00000a  4770              BX       lr
                  |L13.12|
00000c  490d              LDR      r1,|L13.68|
00000e  2300              MOVS     r3,#0                 ;716
000010  60cb              STR      r3,[r1,#0xc]          ;716
000012  4b0d              LDR      r3,|L13.72|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;717
000018  604a              STR      r2,[r1,#4]            ;717
00001a  2201              MOVS     r2,#1                 ;718
00001c  610a              STR      r2,[r1,#0x10]         ;718
                  |L13.30|
00001e  690a              LDR      r2,[r1,#0x10]         ;720
000020  07d2              LSLS     r2,r2,#31             ;720
000022  d1fc              BNE      |L13.30|
000024  6c0a              LDR      r2,[r1,#0x40]         ;722
000026  0652              LSLS     r2,r2,#25             ;722
000028  d506              BPL      |L13.56|
00002a  6c08              LDR      r0,[r1,#0x40]         ;724
00002c  f0400040          ORR      r0,r0,#0x40           ;724
000030  6408              STR      r0,[r1,#0x40]         ;724
000032  f04f30ff          MOV      r0,#0xffffffff        ;725
                  |L13.54|
000036  4770              BX       lr
                  |L13.56|
000038  6889              LDR      r1,[r1,#8]            ;729
00003a  1c49              ADDS     r1,r1,#1              ;729
00003c  d0fb              BEQ      |L13.54|
00003e  2001              MOVS     r0,#1                 ;731
000040  4770              BX       lr
;;;737    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x4000c000
                  |L13.72|
                          DCD      0x00310800

                          AREA ||i.FMC_Lock_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Lock_OTP PROC
;;;669      */
;;;670    int32_t FMC_Lock_OTP(uint32_t otp_num)
000000  4602              MOV      r2,r0
;;;671    {
;;;672        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;673    
;;;674        if (otp_num > 255UL)
000004  2aff              CMP      r2,#0xff
000006  d901              BLS      |L14.12|
;;;675        {
;;;676            ret = -2;
000008  1e80              SUBS     r0,r0,#2
                  |L14.10|
;;;677        }
;;;678    
;;;679        if (ret == 0)
;;;680        {
;;;681            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;682            FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
;;;683            FMC->ISPDAT = 0UL;
;;;684            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;685    
;;;686            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;687    
;;;688            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;689            {
;;;690                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;691                ret = -1;
;;;692            }
;;;693        }
;;;694        return ret;
;;;695    }
00000a  4770              BX       lr
                  |L14.12|
00000c  490b              LDR      r1,|L14.60|
00000e  2321              MOVS     r3,#0x21              ;681
000010  60cb              STR      r3,[r1,#0xc]          ;681
000012  4b0b              LDR      r3,|L14.64|
000014  eb030282          ADD      r2,r3,r2,LSL #2       ;682
000018  604a              STR      r2,[r1,#4]            ;682
00001a  2200              MOVS     r2,#0                 ;683
00001c  608a              STR      r2,[r1,#8]            ;683
00001e  2201              MOVS     r2,#1                 ;684
000020  610a              STR      r2,[r1,#0x10]         ;684
                  |L14.34|
000022  690a              LDR      r2,[r1,#0x10]         ;686
000024  07d2              LSLS     r2,r2,#31             ;686
000026  d1fc              BNE      |L14.34|
000028  6c0a              LDR      r2,[r1,#0x40]         ;688
00002a  0652              LSLS     r2,r2,#25             ;688
00002c  d5ed              BPL      |L14.10|
00002e  6c08              LDR      r0,[r1,#0x40]         ;690
000030  f0400040          ORR      r0,r0,#0x40           ;690
000034  6408              STR      r0,[r1,#0x40]         ;690
000036  f04f30ff          MOV      r0,#0xffffffff        ;691
00003a  4770              BX       lr
;;;696    
                          ENDP

                  |L14.60|
                          DCD      0x4000c000
                  |L14.64|
                          DCD      0x00310800

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;344      */
;;;345    void FMC_Open(void)
000000  4802              LDR      r0,|L15.12|
;;;346    {
;;;347        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;348    }
00000a  4770              BX       lr
;;;349    
                          ENDP

                  |L15.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;356      */
;;;357    uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L16.24|
;;;358    {
;;;359        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;360        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;361        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
                  |L16.12|
;;;362        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000c  6908              LDR      r0,[r1,#0x10]
00000e  07c0              LSLS     r0,r0,#31
000010  d1fc              BNE      |L16.12|
;;;363    
;;;364        return FMC->ISPDAT;
000012  6888              LDR      r0,[r1,#8]
;;;365    }
000014  4770              BX       lr
;;;366    
                          ENDP

000016  0000              DCW      0x0000
                  |L16.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;746      */
;;;747    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;748    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;749        int32_t   ret = 0;
000006  2300              MOVS     r3,#0
;;;750    
;;;751        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000008  f44f1040          MOV      r0,#0x300000
00000c  f7fffffe          BL       FMC_Read
;;;752    
;;;753        if (u32Count < 2UL)
000010  6020              STR      r0,[r4,#0]
000012  2d02              CMP      r5,#2
000014  d202              BCS      |L17.28|
;;;754        {
;;;755            ret = -1;
000016  f04f33ff          MOV      r3,#0xffffffff
00001a  e003              B        |L17.36|
                  |L17.28|
;;;756        }
;;;757        else
;;;758        {
;;;759            u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
00001c  4802              LDR      r0,|L17.40|
00001e  f7fffffe          BL       FMC_Read
000022  6060              STR      r0,[r4,#4]
                  |L17.36|
;;;760        }
;;;761        return ret;
000024  4618              MOV      r0,r3
;;;762    }
000026  bd30              POP      {r4,r5,pc}
;;;763    
                          ENDP

                  |L17.40|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;405      */
;;;406    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L18.8|
;;;407    {
;;;408        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;409    }
000004  4770              BX       lr
;;;410    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_64||, CODE, READONLY, ALIGN=2

                  FMC_Read_64 PROC
;;;376      */
;;;377    int32_t FMC_Read_64(uint32_t u32addr, uint32_t * u32data0, uint32_t * u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;378    {
000002  4604              MOV      r4,r0
;;;379        int32_t  ret = 0;
;;;380    
;;;381        FMC->ISPCMD = FMC_ISPCMD_READ_64;
000004  4b0d              LDR      r3,|L19.60|
000006  2000              MOVS     r0,#0                 ;379
000008  2540              MOVS     r5,#0x40
00000a  60dd              STR      r5,[r3,#0xc]
;;;382        FMC->ISPADDR    = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;383        FMC->ISPDAT = 0x0UL;
00000e  6098              STR      r0,[r3,#8]
;;;384        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000010  2401              MOVS     r4,#1
000012  611c              STR      r4,[r3,#0x10]
                  |L19.20|
;;;385    
;;;386        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
000014  6c1c              LDR      r4,[r3,#0x40]
000016  07e4              LSLS     r4,r4,#31
000018  d1fc              BNE      |L19.20|
;;;387    
;;;388        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
00001a  6c1c              LDR      r4,[r3,#0x40]
00001c  0664              LSLS     r4,r4,#25
00001e  d506              BPL      |L19.46|
;;;389        {
;;;390            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000020  6c18              LDR      r0,[r3,#0x40]
000022  f0400040          ORR      r0,r0,#0x40
000026  6418              STR      r0,[r3,#0x40]
;;;391            ret = -1;
000028  f04f30ff          MOV      r0,#0xffffffff
;;;392        }
;;;393        else
;;;394        {
;;;395            *u32data0 = FMC->MPDAT0;
;;;396            *u32data1 = FMC->MPDAT1;
;;;397        }
;;;398        return ret;
;;;399    }
00002c  bd30              POP      {r4,r5,pc}
                  |L19.46|
00002e  f8534f80          LDR      r4,[r3,#0x80]!        ;395
000032  600c              STR      r4,[r1,#0]            ;396
000034  6859              LDR      r1,[r3,#4]            ;396
000036  6011              STR      r1,[r2,#0]            ;396
000038  bd30              POP      {r4,r5,pc}
;;;400    
                          ENDP

00003a  0000              DCW      0x0000
                  |L19.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Read_OTP PROC
;;;630      */
;;;631    int32_t FMC_Read_OTP(uint32_t otp_num, uint32_t *low_word, uint32_t *high_word)
000000  b530              PUSH     {r4,r5,lr}
;;;632    {
000002  4604              MOV      r4,r0
;;;633        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;634    
;;;635        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L20.14|
;;;636        {
;;;637            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
;;;638        }
;;;639    
;;;640        if (ret == 0)
;;;641        {
;;;642            FMC->ISPCMD = FMC_ISPCMD_READ_64;
;;;643            FMC->ISPADDR    = FMC_OTP_BASE + otp_num * 8UL ;
;;;644            FMC->ISPDAT = 0x0UL;
;;;645            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;646    
;;;647            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;648    
;;;649            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;650            {
;;;651                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;652                ret = -1;
;;;653            }
;;;654            else
;;;655            {
;;;656                *low_word = FMC->MPDAT0;
;;;657                *high_word = FMC->MPDAT1;
;;;658            }
;;;659        }
;;;660        return ret;
;;;661    }
00000c  bd30              POP      {r4,r5,pc}
                  |L20.14|
00000e  4b0f              LDR      r3,|L20.76|
000010  2540              MOVS     r5,#0x40              ;642
000012  60dd              STR      r5,[r3,#0xc]          ;642
000014  f44f1544          MOV      r5,#0x310000          ;643
000018  eb0504c4          ADD      r4,r5,r4,LSL #3       ;643
00001c  605c              STR      r4,[r3,#4]            ;643
00001e  2400              MOVS     r4,#0                 ;644
000020  609c              STR      r4,[r3,#8]            ;644
000022  2401              MOVS     r4,#1                 ;645
000024  611c              STR      r4,[r3,#0x10]         ;645
                  |L20.38|
000026  6c1c              LDR      r4,[r3,#0x40]         ;647
000028  07e4              LSLS     r4,r4,#31             ;647
00002a  d1fc              BNE      |L20.38|
00002c  6c1c              LDR      r4,[r3,#0x40]         ;649
00002e  0664              LSLS     r4,r4,#25             ;649
000030  d506              BPL      |L20.64|
000032  6c18              LDR      r0,[r3,#0x40]         ;651
000034  f0400040          ORR      r0,r0,#0x40           ;651
000038  6418              STR      r0,[r3,#0x40]         ;651
00003a  f04f30ff          MOV      r0,#0xffffffff        ;652
00003e  bd30              POP      {r4,r5,pc}
                  |L20.64|
000040  f8534f80          LDR      r4,[r3,#0x80]!        ;656
000044  600c              STR      r4,[r1,#0]            ;657
000046  6859              LDR      r1,[r3,#4]            ;657
000048  6011              STR      r1,[r2,#0]            ;657
00004a  bd30              POP      {r4,r5,pc}
;;;662    
                          ENDP

                  |L20.76|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;420      */
;;;421    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4905              LDR      r1,|L21.24|
;;;422    {
;;;423        if(i32BootSrc)
000002  2800              CMP      r0,#0
;;;424        {
;;;425            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
;;;426        }
;;;427        else
;;;428        {
;;;429            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L21.14|
000008  f0400002          ORR      r0,r0,#2              ;425
00000c  e001              B        |L21.18|
                  |L21.14|
00000e  f0200002          BIC      r0,r0,#2
                  |L21.18|
000012  6008              STR      r0,[r1,#0]            ;425
;;;430        }
;;;431    }
000014  4770              BX       lr
;;;432    
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetSPKey||, CODE, READONLY, ALIGN=2

                  FMC_SetSPKey PROC
;;;902      */
;;;903    int32_t  FMC_SetSPKey(uint32_t key[3], uint32_t kpmax, uint32_t kemax,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;904                          const int32_t lock_CONFIG, const int32_t lock_SPROM)
;;;905    {
;;;906        uint32_t  lock_ctrl = 0UL;
;;;907        uint32_t  u32KeySts;
;;;908        int32_t   ret = 0;
;;;909    
;;;910        if (FMC->KPKEYSTS != 0x200UL)
000004  f8df90e8          LDR      r9,|L22.240|
000008  4607              MOV      r7,r0                 ;905
00000a  2500              MOVS     r5,#0                 ;906
00000c  f8dd8024          LDR      r8,[sp,#0x24]
000010  f8d90060          LDR      r0,[r9,#0x60]
000014  461e              MOV      r6,r3                 ;905
000016  4692              MOV      r10,r2                ;905
000018  468b              MOV      r11,r1                ;905
00001a  462c              MOV      r4,r5                 ;908
00001c  f5b07f00          CMP      r0,#0x200
000020  d000              BEQ      |L22.36|
;;;911        {
;;;912            ret = -1;
000022  1e6c              SUBS     r4,r5,#1
                  |L22.36|
;;;913        }
;;;914    
;;;915        if (FMC_Erase(FMC_KPROM_BASE))
000024  4833              LDR      r0,|L22.244|
000026  f7fffffe          BL       FMC_Erase
00002a  b108              CBZ      r0,|L22.48|
;;;916        {
;;;917            ret = -2;
00002c  f06f0401          MVN      r4,#1
                  |L22.48|
;;;918        }
;;;919    
;;;920        if (FMC_Erase(FMC_KPROM_BASE+0x200UL))
000030  4831              LDR      r0,|L22.248|
000032  f7fffffe          BL       FMC_Erase
000036  b108              CBZ      r0,|L22.60|
;;;921        {
;;;922            ret = -3;
000038  f06f0402          MVN      r4,#2
                  |L22.60|
;;;923        }
;;;924    
;;;925        if (!lock_CONFIG)
00003c  b906              CBNZ     r6,|L22.64|
;;;926        {
;;;927            lock_ctrl |= 0x1UL;
00003e  2501              MOVS     r5,#1
                  |L22.64|
;;;928        }
;;;929    
;;;930        if (!lock_SPROM)
000040  f1b80f00          CMP      r8,#0
000044  d101              BNE      |L22.74|
;;;931        {
;;;932            lock_ctrl |= 0x2UL;
000046  f0450502          ORR      r5,r5,#2
                  |L22.74|
;;;933        }
;;;934    
;;;935        if (ret == 0)
00004a  bb2c              CBNZ     r4,|L22.152|
;;;936        {
;;;937            FMC_Write(FMC_KPROM_BASE, key[0]);
00004c  4829              LDR      r0,|L22.244|
00004e  6839              LDR      r1,[r7,#0]
000050  f7fffffe          BL       FMC_Write
;;;938            FMC_Write(FMC_KPROM_BASE+0x4UL, key[1]);
000054  4827              LDR      r0,|L22.244|
000056  6879              LDR      r1,[r7,#4]
000058  1d00              ADDS     r0,r0,#4
00005a  f7fffffe          BL       FMC_Write
;;;939            FMC_Write(FMC_KPROM_BASE+0x8UL, key[2]);
00005e  4825              LDR      r0,|L22.244|
000060  68b9              LDR      r1,[r7,#8]
000062  3008              ADDS     r0,r0,#8
000064  f7fffffe          BL       FMC_Write
;;;940            FMC_Write(FMC_KPROM_BASE+0xCUL, kpmax);
000068  4822              LDR      r0,|L22.244|
00006a  4659              MOV      r1,r11
00006c  300c              ADDS     r0,r0,#0xc
00006e  f7fffffe          BL       FMC_Write
;;;941            FMC_Write(FMC_KPROM_BASE+0x10UL, kemax);
000072  4820              LDR      r0,|L22.244|
000074  4651              MOV      r1,r10
000076  3010              ADDS     r0,r0,#0x10
000078  f7fffffe          BL       FMC_Write
;;;942            FMC_Write(FMC_KPROM_BASE+0x14UL, lock_ctrl);
00007c  481d              LDR      r0,|L22.244|
00007e  4629              MOV      r1,r5
000080  3014              ADDS     r0,r0,#0x14
000082  f7fffffe          BL       FMC_Write
000086  4649              MOV      r1,r9                 ;910
                  |L22.136|
;;;943    
;;;944            while (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk) { }
000088  6e08              LDR      r0,[r1,#0x60]
00008a  07c0              LSLS     r0,r0,#31
00008c  d1fc              BNE      |L22.136|
;;;945    
;;;946            u32KeySts = FMC->KPKEYSTS;
00008e  6e08              LDR      r0,[r1,#0x60]
;;;947    
;;;948            if (!(u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk))
000090  0782              LSLS     r2,r0,#30
000092  d402              BMI      |L22.154|
;;;949            {
;;;950                /* Security key lock failed! */
;;;951                ret = -4;
000094  f06f0403          MVN      r4,#3
                  |L22.152|
000098  e026              B        |L22.232|
                  |L22.154|
;;;952            }
;;;953            else if ((lock_CONFIG && (!(u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk))) ||
;;;954                     ((!lock_CONFIG) && (u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk)))
00009a  ea4f6280          LSL      r2,r0,#26
00009e  b116              CBZ      r6,|L22.166|
0000a0  2a00              CMP      r2,#0                 ;953
0000a2  da02              BGE      |L22.170|
0000a4  e004              B        |L22.176|
                  |L22.166|
0000a6  2a00              CMP      r2,#0
0000a8  da02              BGE      |L22.176|
                  |L22.170|
;;;955            {
;;;956                /* CONFIG lock failed! */
;;;957                ret = -5;
0000aa  f06f0404          MVN      r4,#4
0000ae  e01b              B        |L22.232|
                  |L22.176|
;;;958            }
;;;959            else if ((lock_SPROM && (!(u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk))) ||
0000b0  f1b80f00          CMP      r8,#0
;;;960                     ((!lock_SPROM) && (u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk)))
0000b4  ea4f6040          LSL      r0,r0,#25
0000b8  d002              BEQ      |L22.192|
0000ba  2800              CMP      r0,#0                 ;959
0000bc  da02              BGE      |L22.196|
0000be  e004              B        |L22.202|
                  |L22.192|
0000c0  2800              CMP      r0,#0
0000c2  da02              BGE      |L22.202|
                  |L22.196|
;;;961            {
;;;962                /* CONFIG lock failed! */
;;;963                ret = -6;
0000c4  f06f0405          MVN      r4,#5
0000c8  e00e              B        |L22.232|
                  |L22.202|
;;;964            }
;;;965            else if (((FMC->KPCNT & FMC_KPCNT_KPMAX_Msk) >> FMC_KPCNT_KPMAX_Pos) != kpmax)
0000ca  6e88              LDR      r0,[r1,#0x68]
0000cc  f3c02203          UBFX     r2,r0,#8,#4
0000d0  455a              CMP      r2,r11
0000d2  d002              BEQ      |L22.218|
;;;966            {
;;;967                /* KPMAX failed! */
;;;968                ret = -7;
0000d4  f06f0406          MVN      r4,#6
0000d8  e006              B        |L22.232|
                  |L22.218|
;;;969            }
;;;970            else if (((FMC->KPKEYCNT & FMC_KPKEYCNT_KPKEMAX_Msk) >> FMC_KPKEYCNT_KPKEMAX_Pos) != kemax)
0000da  6e48              LDR      r0,[r1,#0x64]
0000dc  f3c02105          UBFX     r1,r0,#8,#6
0000e0  4551              CMP      r1,r10
0000e2  d001              BEQ      |L22.232|
;;;971            {
;;;972                /* KEMAX failed! */
;;;973                ret = -8;
0000e4  f06f0407          MVN      r4,#7
                  |L22.232|
;;;974            }
;;;975        }
;;;976        return ret;
0000e8  4620              MOV      r0,r4
;;;977    }
0000ea  e8bd8ff0          POP      {r4-r11,pc}
;;;978    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L22.240|
                          DCD      0x4000c000
                  |L22.244|
                          DCD      0x00301000
                  |L22.248|
                          DCD      0x00301200

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;439      */
;;;440    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L23.24|
;;;441    {
;;;442        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;443        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;444        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;445        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L23.14|
;;;446        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000e  6910              LDR      r0,[r2,#0x10]
000010  07c0              LSLS     r0,r0,#31
000012  d1fc              BNE      |L23.14|
;;;447    }
000014  4770              BX       lr
;;;448    
                          ENDP

000016  0000              DCW      0x0000
                  |L23.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write8Bytes||, CODE, READONLY, ALIGN=2

                  FMC_Write8Bytes PROC
;;;457      */
;;;458    int32_t FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;459    {
000002  4604              MOV      r4,r0
;;;460        int32_t  ret = 0;
;;;461    
;;;462        FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_64;
000004  4b0b              LDR      r3,|L24.52|
000006  2000              MOVS     r0,#0                 ;460
000008  2561              MOVS     r5,#0x61
00000a  60dd              STR      r5,[r3,#0xc]
;;;463        FMC->ISPADDR = u32addr;
00000c  605c              STR      r4,[r3,#4]
;;;464        FMC->MPDAT0  = u32data0;
00000e  f8c31080          STR      r1,[r3,#0x80]
;;;465        FMC->MPDAT1  = u32data1;
000012  f8c32084          STR      r2,[r3,#0x84]
;;;466        FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
000016  2101              MOVS     r1,#1
000018  6119              STR      r1,[r3,#0x10]
                  |L24.26|
;;;467    
;;;468        while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
00001a  6c19              LDR      r1,[r3,#0x40]
00001c  07c9              LSLS     r1,r1,#31
00001e  d1fc              BNE      |L24.26|
;;;469    
;;;470        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000020  6c19              LDR      r1,[r3,#0x40]
000022  0649              LSLS     r1,r1,#25
000024  d505              BPL      |L24.50|
;;;471        {
;;;472            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000026  6c18              LDR      r0,[r3,#0x40]
000028  f0400040          ORR      r0,r0,#0x40
00002c  6418              STR      r0,[r3,#0x40]
;;;473            ret = -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L24.50|
;;;474        }
;;;475        return ret;
;;;476    }
000032  bd30              POP      {r4,r5,pc}
;;;477    
                          ENDP

                  |L24.52|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;773      */
;;;774    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;775    {
;;;776        int   i;
;;;777    
;;;778        FMC_ENABLE_CFG_UPDATE();
000004  4e1f              LDR      r6,|L25.132|
000006  4605              MOV      r5,r0                 ;775
000008  4688              MOV      r8,r1                 ;775
00000a  6830              LDR      r0,[r6,#0]
00000c  f0400010          ORR      r0,r0,#0x10
000010  6030              STR      r0,[r6,#0]
;;;779        FMC_Erase(FMC_CONFIG_BASE);
000012  01b7              LSLS     r7,r6,#6
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       FMC_Erase
;;;780    
;;;781        if ((FMC_Read(FMC_CONFIG_BASE) != 0xFFFFFFFF) || (FMC_Read(FMC_CONFIG_BASE+4) != 0xFFFFFFFF) ||
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       FMC_Read
;;;782                (FMC_Read(FMC_CONFIG_BASE+8) != 0xFFFF5A5A))
;;;783        {
;;;784            FMC_DISABLE_CFG_UPDATE();
;;;785            return -1;
000020  f04f3aff          MOV      r10,#0xffffffff
000024  1c40              ADDS     r0,r0,#1
000026  d11c              BNE      |L25.98|
000028  1d38              ADDS     r0,r7,#4              ;781
00002a  f7fffffe          BL       FMC_Read
00002e  1c40              ADDS     r0,r0,#1              ;781
000030  d117              BNE      |L25.98|
000032  4815              LDR      r0,|L25.136|
000034  f7fffffe          BL       FMC_Read
000038  f24a51a6          MOV      r1,#0xa5a6            ;782
00003c  42c8              CMN      r0,r1                 ;782
00003e  d110              BNE      |L25.98|
;;;786        }
;;;787    
;;;788        for (i = 0; i < u32Count; i++)
000040  2400              MOVS     r4,#0
000042  46b9              MOV      r9,r7                 ;779
000044  e015              B        |L25.114|
                  |L25.70|
;;;789        {
;;;790            FMC_Write(FMC_CONFIG_BASE+i*4UL, u32Config[i]);
000046  eb090084          ADD      r0,r9,r4,LSL #2
00004a  f8551024          LDR      r1,[r5,r4,LSL #2]
00004e  4607              MOV      r7,r0
000050  f7fffffe          BL       FMC_Write
000054  4638              MOV      r0,r7
;;;791    
;;;792            if (FMC_Read(FMC_CONFIG_BASE+i*4UL) != u32Config[i])
000056  f7fffffe          BL       FMC_Read
00005a  f8551024          LDR      r1,[r5,r4,LSL #2]
00005e  4288              CMP      r0,r1
000060  d006              BEQ      |L25.112|
                  |L25.98|
;;;793            {
;;;794                FMC_DISABLE_CFG_UPDATE();
000062  6830              LDR      r0,[r6,#0]
000064  f0200010          BIC      r0,r0,#0x10
000068  6030              STR      r0,[r6,#0]
;;;795                return -1;
00006a  4650              MOV      r0,r10
                  |L25.108|
;;;796            }
;;;797        }
;;;798    
;;;799        FMC_DISABLE_CFG_UPDATE();
;;;800        return 0;
;;;801    }
00006c  e8bd87f0          POP      {r4-r10,pc}
                  |L25.112|
000070  1c64              ADDS     r4,r4,#1
                  |L25.114|
000072  4544              CMP      r4,r8                 ;788
000074  d3e7              BCC      |L25.70|
000076  6830              LDR      r0,[r6,#0]            ;799
000078  f0200010          BIC      r0,r0,#0x10           ;799
00007c  6030              STR      r0,[r6,#0]            ;799
00007e  2000              MOVS     r0,#0                 ;800
000080  e7f4              B        |L25.108|
;;;802    
                          ENDP

000082  0000              DCW      0x0000
                  |L25.132|
                          DCD      0x4000c000
                  |L25.136|
                          DCD      0x00300008

                          AREA ||i.FMC_WriteMultiple||, CODE, READONLY, ALIGN=2

                  FMC_WriteMultiple PROC
;;;487      */
;;;488    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;489    {
000002  4605              MOV      r5,r0
;;;490        int   i, idx, retval = 0;
000004  2000              MOVS     r0,#0
;;;491    
;;;492        if ((u32Addr >= FMC_APROM_END) || ((u32Addr % 8) != 0))
000006  f5b52f00          CMP      r5,#0x80000
00000a  d201              BCS      |L26.16|
00000c  076b              LSLS     r3,r5,#29
00000e  d002              BEQ      |L26.22|
                  |L26.16|
;;;493        {
;;;494            return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L26.20|
;;;495        }
;;;496    
;;;497        u32Len = u32Len - (u32Len % 8);         /* u32Len must be multiple of 8. */
;;;498    
;;;499        idx = 0;
;;;500    
;;;501        while (u32Len >= 8)
;;;502        {
;;;503            FMC->ISPADDR = u32Addr;
;;;504            FMC->MPDAT0  = pu32Buf[idx++];
;;;505            FMC->MPDAT1  = pu32Buf[idx++];
;;;506            FMC->MPDAT2  = pu32Buf[idx++];
;;;507            FMC->MPDAT3  = pu32Buf[idx++];
;;;508            FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_MUL;
;;;509            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;510    
;;;511            for (i = 16; i < FMC_MULTI_WORD_PROG_LEN; )
;;;512            {
;;;513                while (FMC->MPSTS & (FMC_MPSTS_D0_Msk | FMC_MPSTS_D1_Msk))
;;;514                    ;
;;;515                retval += 8;
;;;516                u32Len -= 8;
;;;517                if (u32Len < 8)
;;;518                {
;;;519                    return retval;
;;;520                }
;;;521    
;;;522                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;523                {
;;;524                    /* printf("    [WARNING] busy cleared after D0D1 cleared!\n"); */
;;;525                    i += 8;
;;;526                    break;
;;;527                }
;;;528    
;;;529                FMC->MPDAT0 = pu32Buf[idx++];
;;;530                FMC->MPDAT1 = pu32Buf[idx++];
;;;531    
;;;532                if (i == FMC_MULTI_WORD_PROG_LEN/4)
;;;533                    break;           // done
;;;534    
;;;535                while (FMC->MPSTS & (FMC_MPSTS_D2_Msk | FMC_MPSTS_D3_Msk))
;;;536                    ;
;;;537                retval += 8;
;;;538                u32Len -= 8;
;;;539                if (u32Len < 8)
;;;540                {
;;;541                    return retval;
;;;542                }
;;;543    
;;;544                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
;;;545                {
;;;546                    /* printf("    [WARNING] busy cleared after D2D3 cleared!\n"); */
;;;547                    i += 8;
;;;548                    break;
;;;549                }
;;;550    
;;;551                FMC->MPDAT2 = pu32Buf[idx++];
;;;552                FMC->MPDAT3 = pu32Buf[idx++];
;;;553            }
;;;554    
;;;555            if (i != FMC_MULTI_WORD_PROG_LEN)
;;;556            {
;;;557                /* printf("    [WARNING] Multi-word program interrupted at 0x%x !!\n", i); */
;;;558                return retval;
;;;559            }
;;;560    
;;;561            while (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk) ;
;;;562    
;;;563            u32Addr += FMC_MULTI_WORD_PROG_LEN;
;;;564        }
;;;565        return retval;
;;;566    }
000014  bdf0              POP      {r4-r7,pc}
                  |L26.22|
000016  f0020307          AND      r3,r2,#7              ;497
00001a  1ad3              SUBS     r3,r2,r3              ;497
00001c  2200              MOVS     r2,#0                 ;499
00001e  f44f7c00          MOV      r12,#0x200            ;511
000022  4e2d              LDR      r6,|L26.216|
000024  e053              B        |L26.206|
                  |L26.38|
000026  6075              STR      r5,[r6,#4]            ;503
000028  f8514022          LDR      r4,[r1,r2,LSL #2]     ;504
00002c  f8c64080          STR      r4,[r6,#0x80]         ;504
000030  1c52              ADDS     r2,r2,#1              ;504
000032  f8514022          LDR      r4,[r1,r2,LSL #2]     ;505
000036  f8c64084          STR      r4,[r6,#0x84]         ;505
00003a  1c52              ADDS     r2,r2,#1              ;505
00003c  f8514022          LDR      r4,[r1,r2,LSL #2]     ;506
000040  f8c64088          STR      r4,[r6,#0x88]         ;506
000044  1c52              ADDS     r2,r2,#1              ;506
000046  f8514022          LDR      r4,[r1,r2,LSL #2]     ;507
00004a  f8c6408c          STR      r4,[r6,#0x8c]         ;507
00004e  2427              MOVS     r4,#0x27              ;508
000050  60f4              STR      r4,[r6,#0xc]          ;508
000052  2401              MOVS     r4,#1                 ;509
000054  6134              STR      r4,[r6,#0x10]         ;509
000056  2410              MOVS     r4,#0x10              ;511
000058  1c52              ADDS     r2,r2,#1              ;511
                  |L26.90|
00005a  f8d670c0          LDR      r7,[r6,#0xc0]         ;513
00005e  f0170f30          TST      r7,#0x30              ;513
000062  d1fa              BNE      |L26.90|
000064  3008              ADDS     r0,r0,#8              ;513
000066  3b08              SUBS     r3,r3,#8              ;513
000068  2b08              CMP      r3,#8                 ;517
00006a  d3d3              BCC      |L26.20|
00006c  f8d670c0          LDR      r7,[r6,#0xc0]         ;522
000070  07ff              LSLS     r7,r7,#31             ;522
000072  d02f              BEQ      |L26.212|
000074  f8517022          LDR      r7,[r1,r2,LSL #2]     ;529
000078  f8c67080          STR      r7,[r6,#0x80]         ;529
00007c  1c52              ADDS     r2,r2,#1              ;529
00007e  f8517022          LDR      r7,[r1,r2,LSL #2]     ;530
000082  f8c67084          STR      r7,[r6,#0x84]         ;530
000086  1c52              ADDS     r2,r2,#1              ;530
000088  2c80              CMP      r4,#0x80              ;532
00008a  d0c3              BEQ      |L26.20|
                  |L26.140|
00008c  f8d670c0          LDR      r7,[r6,#0xc0]         ;535
000090  f0170fc0          TST      r7,#0xc0              ;535
000094  d1fa              BNE      |L26.140|
000096  3008              ADDS     r0,r0,#8              ;535
000098  3b08              SUBS     r3,r3,#8              ;535
00009a  2b08              CMP      r3,#8                 ;539
00009c  d3ba              BCC      |L26.20|
00009e  f8d670c0          LDR      r7,[r6,#0xc0]         ;544
0000a2  07ff              LSLS     r7,r7,#31             ;544
0000a4  d016              BEQ      |L26.212|
0000a6  f8517022          LDR      r7,[r1,r2,LSL #2]     ;551
0000aa  f8c67088          STR      r7,[r6,#0x88]         ;551
0000ae  1c52              ADDS     r2,r2,#1              ;551
0000b0  f8517022          LDR      r7,[r1,r2,LSL #2]     ;552
0000b4  f8c6708c          STR      r7,[r6,#0x8c]         ;552
0000b8  1c52              ADDS     r2,r2,#1              ;552
0000ba  4564              CMP      r4,r12                ;511
0000bc  dbcd              BLT      |L26.90|
                  |L26.190|
0000be  4564              CMP      r4,r12                ;555
0000c0  d1a8              BNE      |L26.20|
                  |L26.194|
0000c2  f8d640c0          LDR      r4,[r6,#0xc0]         ;561
0000c6  07e4              LSLS     r4,r4,#31             ;561
0000c8  d1fb              BNE      |L26.194|
0000ca  f5057500          ADD      r5,r5,#0x200          ;561
                  |L26.206|
0000ce  2b08              CMP      r3,#8                 ;501
0000d0  d2a9              BCS      |L26.38|
0000d2  bdf0              POP      {r4-r7,pc}
                  |L26.212|
0000d4  3408              ADDS     r4,r4,#8
0000d6  e7f2              B        |L26.190|
;;;567    
                          ENDP

                  |L26.216|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Write_OTP PROC
;;;577      */
;;;578    int32_t FMC_Write_OTP(uint32_t otp_num, uint32_t low_word, uint32_t high_word)
000000  b5f0              PUSH     {r4-r7,lr}
;;;579    {
000002  4604              MOV      r4,r0
;;;580        int32_t  ret = 0;
000004  2000              MOVS     r0,#0
;;;581    
;;;582        if (otp_num > 255UL)
000006  2cff              CMP      r4,#0xff
000008  d901              BLS      |L27.14|
;;;583        {
;;;584            ret = -2;
00000a  1e80              SUBS     r0,r0,#2
                  |L27.12|
;;;585        }
;;;586    
;;;587        if (ret == 0)
;;;588        {
;;;589            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;590            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL;
;;;591            FMC->ISPDAT = low_word;
;;;592            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;593    
;;;594            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;595    
;;;596            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;597            {
;;;598                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;599                ret = -1;
;;;600            }
;;;601        }
;;;602    
;;;603        if (ret == 0)
;;;604        {
;;;605            FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
;;;606            FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL + 4UL;
;;;607            FMC->ISPDAT = high_word;
;;;608            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;609    
;;;610            while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
;;;611    
;;;612            if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;613            {
;;;614                FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;615                ret = -1;
;;;616            }
;;;617        }
;;;618    
;;;619        return ret;
;;;620    }
00000c  bdf0              POP      {r4-r7,pc}
                  |L27.14|
00000e  4b14              LDR      r3,|L27.96|
000010  2621              MOVS     r6,#0x21              ;589
000012  60de              STR      r6,[r3,#0xc]          ;589
000014  f44f1544          MOV      r5,#0x310000          ;590
000018  eb0505c4          ADD      r5,r5,r4,LSL #3       ;590
00001c  605d              STR      r5,[r3,#4]            ;590
00001e  6099              STR      r1,[r3,#8]            ;591
000020  2701              MOVS     r7,#1                 ;592
000022  611f              STR      r7,[r3,#0x10]         ;592
                  |L27.36|
000024  6919              LDR      r1,[r3,#0x10]         ;594
000026  07c9              LSLS     r1,r1,#31             ;594
000028  d1fc              BNE      |L27.36|
00002a  6c19              LDR      r1,[r3,#0x40]         ;596
00002c  f04f35ff          MOV      r5,#0xffffffff        ;599
000030  0649              LSLS     r1,r1,#25             ;596
000032  d40e              BMI      |L27.82|
000034  2800              CMP      r0,#0                 ;603
000036  d1e9              BNE      |L27.12|
000038  60de              STR      r6,[r3,#0xc]          ;605
00003a  490a              LDR      r1,|L27.100|
00003c  eb0101c4          ADD      r1,r1,r4,LSL #3       ;606
000040  6059              STR      r1,[r3,#4]            ;606
000042  609a              STR      r2,[r3,#8]            ;607
000044  611f              STR      r7,[r3,#0x10]         ;608
                  |L27.70|
000046  6919              LDR      r1,[r3,#0x10]         ;610
000048  07c9              LSLS     r1,r1,#31             ;610
00004a  d1fc              BNE      |L27.70|
00004c  6c19              LDR      r1,[r3,#0x40]         ;612
00004e  0649              LSLS     r1,r1,#25             ;612
000050  d5dc              BPL      |L27.12|
                  |L27.82|
000052  6c18              LDR      r0,[r3,#0x40]         ;614
000054  f0400040          ORR      r0,r0,#0x40           ;614
000058  6418              STR      r0,[r3,#0x40]         ;614
00005a  4628              MOV      r0,r5                 ;615
00005c  bdf0              POP      {r4-r7,pc}
;;;621    
                          ENDP

00005e  0000              DCW      0x0000
                  |L27.96|
                          DCD      0x4000c000
                  |L27.100|
                          DCD      0x00310004

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____RRX|
#line 587
|__asm___5_fmc_c_65c03504____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
