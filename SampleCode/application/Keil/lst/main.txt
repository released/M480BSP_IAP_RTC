; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.Custom_Init||, CODE, READONLY, ALIGN=2

                  Custom_Init PROC
;;;262    
;;;263    void Custom_Init(void)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265    	SYS->GPH_MFPL = (SYS->GPH_MFPL & ~(SYS_GPH_MFPL_PH0MFP_Msk)) | (SYS_GPH_MFPL_PH0MFP_GPIO);
000002  f04f4080          MOV      r0,#0x40000000
000006  6e81              LDR      r1,[r0,#0x68]
000008  f021010f          BIC      r1,r1,#0xf
00000c  6681              STR      r1,[r0,#0x68]
;;;266    	SYS->GPH_MFPL = (SYS->GPH_MFPL & ~(SYS_GPH_MFPL_PH1MFP_Msk)) | (SYS_GPH_MFPL_PH1MFP_GPIO);
00000e  6e81              LDR      r1,[r0,#0x68]
000010  f02101f0          BIC      r1,r1,#0xf0
000014  6681              STR      r1,[r0,#0x68]
;;;267    	SYS->GPH_MFPL = (SYS->GPH_MFPL & ~(SYS_GPH_MFPL_PH2MFP_Msk)) | (SYS_GPH_MFPL_PH2MFP_GPIO);
000016  6e81              LDR      r1,[r0,#0x68]
000018  f4216170          BIC      r1,r1,#0xf00
00001c  6681              STR      r1,[r0,#0x68]
;;;268    
;;;269    	//EVM LED
;;;270    	GPIO_SetMode(PH,BIT0,GPIO_MODE_OUTPUT);
00001e  4c09              LDR      r4,|L1.68|
000020  2201              MOVS     r2,#1
000022  4611              MOV      r1,r2
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       GPIO_SetMode
;;;271    	GPIO_SetMode(PH,BIT1,GPIO_MODE_OUTPUT);
00002a  2201              MOVS     r2,#1
00002c  2102              MOVS     r1,#2
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GPIO_SetMode
;;;272    	GPIO_SetMode(PH,BIT2,GPIO_MODE_OUTPUT);
000034  4620              MOV      r0,r4
000036  2201              MOVS     r2,#1
000038  e8bd4010          POP      {r4,lr}
00003c  2104              MOVS     r1,#4
00003e  f7ffbffe          B.W      GPIO_SetMode
;;;273    	
;;;274    }
;;;275    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x400041c0

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  NVIC_EnableIRQ PROC
;;;1625    */
;;;1626   __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  f000021f          AND      r2,r0,#0x1f
;;;1627   {
;;;1628     NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  0940              LSRS     r0,r0,#5
00000a  0080              LSLS     r0,r0,#2
00000c  f10020e0          ADD      r0,r0,#0xe000e000
000010  f8c01100          STR      r1,[r0,#0x100]
;;;1629   }
000014  4770              BX       lr
;;;1630   
                          ENDP


                          AREA ||i.NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  NVIC_SystemReset PROC
;;;1789    */
;;;1790   __STATIC_INLINE void NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
;;;1791   {
;;;1792     __DSB();                                                          /* Ensure all outstanding memory accesses included
;;;1793                                                                          buffered write are completed before reset */
;;;1794     SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
000004  4805              LDR      r0,|L3.28|
000006  6801              LDR      r1,[r0,#0]
000008  4a05              LDR      r2,|L3.32|
00000a  f40161e0          AND      r1,r1,#0x700
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
;;;1795                              (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
;;;1796                               SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
;;;1797     __DSB();                                                          /* Ensure completion of memory access */
000012  f3bf8f4f          DSB      
                  |L3.22|
;;;1798   
;;;1799     for(;;)                                                           /* wait until reset */
;;;1800     {
;;;1801       __NOP();
000016  bf00              NOP      
000018  e7fd              B        |L3.22|
;;;1802     }
;;;1803   }
;;;1804   
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0xe000ed0c
                  |L3.32|
                          DCD      0x05fa0004

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;275    
;;;276    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;277    {
;;;278        /* Unlock protected registers */
;;;279        SYS_UnlockReg();
000002  f7fffffe          BL       SYS_UnlockReg
;;;280    
;;;281        /* Set XT1_OUT(PF.2) and XT1_IN(PF.3) to input mode */
;;;282        PF->MODE &= ~(GPIO_MODE_MODE2_Msk | GPIO_MODE_MODE3_Msk);
000006  f04f2040          MOV      r0,#0x40004000
00000a  f8d01140          LDR      r1,[r0,#0x140]
00000e  f02101f0          BIC      r1,r1,#0xf0
000012  f8c01140          STR      r1,[r0,#0x140]
;;;283    
;;;284        CLK_EnableXtalRC(CLK_PWRCTL_HIRCEN_Msk);
000016  2004              MOVS     r0,#4
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;285        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;286    
;;;287        CLK_EnableXtalRC(CLK_PWRCTL_HXTEN_Msk);
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       CLK_EnableXtalRC
;;;288        CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       CLK_WaitClockReady
;;;289    
;;;290        CLK_EnableXtalRC(CLK_PWRCTL_LIRCEN_Msk);
00002e  2008              MOVS     r0,#8
000030  f7fffffe          BL       CLK_EnableXtalRC
;;;291        CLK_WaitClockReady(CLK_STATUS_LIRCSTB_Msk);
000034  2008              MOVS     r0,#8
000036  f7fffffe          BL       CLK_WaitClockReady
;;;292    
;;;293        CLK_EnableXtalRC(CLK_PWRCTL_LXTEN_Msk);
00003a  2002              MOVS     r0,#2
00003c  f7fffffe          BL       CLK_EnableXtalRC
;;;294        CLK_WaitClockReady(CLK_STATUS_LXTSTB_Msk);
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       CLK_WaitClockReady
;;;295    
;;;296        /* Set core clock as PLL_CLOCK from PLL */
;;;297        CLK_SetCoreClock(FREQ_192MHZ);
000046  4819              LDR      r0,|L4.172|
000048  f7fffffe          BL       CLK_SetCoreClock
;;;298        /* Set PCLK0/PCLK1 to HCLK/2 */
;;;299        CLK->PCLKDIV = (CLK_PCLKDIV_APB0DIV_DIV2 | CLK_PCLKDIV_APB1DIV_DIV2);
00004c  2011              MOVS     r0,#0x11
00004e  0784              LSLS     r4,r0,#30
000050  f8c40234          STR      r0,[r4,#0x234]
;;;300    
;;;301        /* Enable UART clock */
;;;302        CLK_EnableModuleClock(UART0_MODULE);
000054  4d16              LDR      r5,|L4.176|
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       CLK_EnableModuleClock
;;;303        /* Select UART clock source from HXT */
;;;304        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_CLKDIV0_UART0(1));
00005c  2200              MOVS     r2,#0
00005e  f04f7140          MOV      r1,#0x3000000
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       CLK_SetModuleClock
;;;305    
;;;306        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;307        SYS->GPB_MFPH &= ~(SYS_GPB_MFPH_PB12MFP_Msk | SYS_GPB_MFPH_PB13MFP_Msk);
000068  6be0              LDR      r0,[r4,#0x3c]
00006a  f420007f          BIC      r0,r0,#0xff0000
00006e  63e0              STR      r0,[r4,#0x3c]
;;;308        SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB12MFP_UART0_RXD | SYS_GPB_MFPH_PB13MFP_UART0_TXD);
000070  6be0              LDR      r0,[r4,#0x3c]
000072  f44000cc          ORR      r0,r0,#0x660000
000076  63e0              STR      r0,[r4,#0x3c]
;;;309    
;;;310        CLK_EnableModuleClock(TMR1_MODULE);
000078  4d0e              LDR      r5,|L4.180|
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       CLK_EnableModuleClock
;;;311        CLK_SetModuleClock(TMR1_MODULE, CLK_CLKSEL1_TMR1SEL_HIRC, 0);
000080  2200              MOVS     r2,#0
000082  f44f41e0          MOV      r1,#0x7000
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       CLK_SetModuleClock
;;;312    
;;;313        CLK_EnableModuleClock(RTC_MODULE);
00008c  4d0a              LDR      r5,|L4.184|
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       CLK_EnableModuleClock
;;;314        CLK_SetModuleClock(RTC_MODULE, CLK_CLKSEL3_RTCSEL_LXT,  NULL);
000094  2200              MOVS     r2,#0
000096  4611              MOV      r1,r2
000098  4628              MOV      r0,r5
00009a  f7fffffe          BL       CLK_SetModuleClock
;;;315    	
;;;316        /* Update System Core Clock */
;;;317        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;318        SystemCoreClockUpdate();
00009e  f7fffffe          BL       SystemCoreClockUpdate
0000a2  2000              MOVS     r0,#0
0000a4  f8c40100          STR      r0,[r4,#0x100]
;;;319    
;;;320        /* Lock protected registers */
;;;321        SYS_LockReg();
;;;322    }
0000a8  bd70              POP      {r4-r6,pc}
;;;323    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L4.172|
                          DCD      0x0b71b000
                  |L4.176|
                          DCD      0x57803d10
                  |L4.180|
                          DCD      0x5ec00003
                  |L4.184|
                          DCD      0x72800001

                          AREA ||i.SYS_UnlockReg||, CODE, READONLY, ALIGN=1

                  SYS_UnlockReg PROC
;;;1585     */
;;;1586   __STATIC_INLINE void SYS_UnlockReg(void)
000000  2159              MOVS     r1,#0x59
;;;1587   {
000002  b510              PUSH     {r4,lr}
;;;1588       do
;;;1589       {
;;;1590           SYS->REGLCTL = 0x59UL;
000004  0788              LSLS     r0,r1,#30
;;;1591           SYS->REGLCTL = 0x16UL;
000006  2216              MOVS     r2,#0x16
;;;1592           SYS->REGLCTL = 0x88UL;
000008  2388              MOVS     r3,#0x88
                  |L5.10|
00000a  f8c01100          STR      r1,[r0,#0x100]        ;1590
00000e  f8c02100          STR      r2,[r0,#0x100]        ;1591
000012  f8c03100          STR      r3,[r0,#0x100]
;;;1593       }
;;;1594       while(SYS->REGLCTL == 0UL);
000016  f8d04100          LDR      r4,[r0,#0x100]
00001a  2c00              CMP      r4,#0
00001c  d0f5              BEQ      |L5.10|
;;;1595   }
00001e  bd10              POP      {r4,pc}
;;;1596   
                          ENDP


                          AREA ||i.TIMER1_Init||, CODE, READONLY, ALIGN=2

                  TIMER1_Init PROC
;;;167    
;;;168    void TIMER1_Init(void)
000000  b510              PUSH     {r4,lr}
;;;169    {
;;;170        TIMER_Open(TIMER1, TIMER_PERIODIC_MODE, 1000);
000002  4c0a              LDR      r4,|L6.44|
000004  f44f727a          MOV      r2,#0x3e8
000008  f04f6100          MOV      r1,#0x8000000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       TIMER_Open
000012  6820              LDR      r0,[r4,#0]
000014  f0405000          ORR      r0,r0,#0x20000000
000018  6020              STR      r0,[r4,#0]
;;;171        TIMER_EnableInt(TIMER1);
;;;172        NVIC_EnableIRQ(TMR1_IRQn);	
00001a  2021              MOVS     r0,#0x21
00001c  f7fffffe          BL       NVIC_EnableIRQ
000020  6820              LDR      r0,[r4,#0]
000022  f0404080          ORR      r0,r0,#0x40000000
000026  6020              STR      r0,[r4,#0]
;;;173        TIMER_Start(TIMER1);
;;;174    }
000028  bd10              POP      {r4,pc}
;;;175    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40050100

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR1_IRQHandler PROC
;;;144    
;;;145    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  4810              LDR      r0,|L7.68|
000004  6881              LDR      r1,[r0,#8]
000006  f3c10100          UBFX     r1,r1,#0,#1
;;;146    {
00000a  2900              CMP      r1,#0
00000c  d019              BEQ      |L7.66|
00000e  2101              MOVS     r1,#1
000010  6081              STR      r1,[r0,#8]
;;;147    	static uint32_t LOG = 0;
;;;148    	
;;;149        if(TIMER_GetIntFlag(TIMER1) == 1)
;;;150        {
;;;151            TIMER_ClearIntFlag(TIMER1);
;;;152    		tick_counter();
000012  f7fffffe          BL       tick_counter
000016  4c0c              LDR      r4,|L7.72|
000018  6860              LDR      r0,[r4,#4]  ; counter_tick
;;;153    
;;;154    		if ((get_tick() % 1000) == 0)
00001a  f44f717a          MOV      r1,#0x3e8
00001e  fbb0f2f1          UDIV     r2,r0,r1
000022  fb010012          MLS      r0,r1,r2,r0
000026  b958              CBNZ     r0,|L7.64|
;;;155    		{
;;;156            	printf("application:%s : %4d\r\n",__FUNCTION__,LOG++);
000028  68a2              LDR      r2,[r4,#8]  ; LOG
00002a  4908              LDR      r1,|L7.76|
00002c  1c50              ADDS     r0,r2,#1
00002e  60a0              STR      r0,[r4,#8]  ; LOG
000030  a007              ADR      r0,|L7.80|
000032  f7fffffe          BL       __2printf
;;;157    			PH0 ^= 1;
000036  480c              LDR      r0,|L7.104|
000038  6801              LDR      r1,[r0,#0]
00003a  f0810101          EOR      r1,r1,#1
00003e  6001              STR      r1,[r0,#0]
                  |L7.64|
000040  6860              LDR      r0,[r4,#4]  ; counter_tick
                  |L7.66|
;;;158    		}
;;;159    
;;;160    		if ((get_tick() % 50) == 0)
;;;161    		{
;;;162    
;;;163    		}	
;;;164        }
;;;165    }
000042  bd10              POP      {r4,pc}
;;;166    
                          ENDP

                  |L7.68|
                          DCD      0x40050100
                  |L7.72|
                          DCD      ||.data||
                  |L7.76|
                          DCD      ||.constdata||+0xf
                  |L7.80|
000050  6170706c          DCB      "application:%s : %4d\r\n",0
000054  69636174
000058  696f6e3a
00005c  2573203a
000060  20253464
000064  0d0a00  
000067  00                DCB      0
                  |L7.104|
                          DCD      0x400049c0

                          AREA ||i.UART0_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART0_IRQHandler PROC
;;;216    
;;;217    void UART0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;218    {
;;;219        if(UART_GET_INT_FLAG(UART0, UART_INTSTS_RDAINT_Msk | UART_INTSTS_RXTOINT_Msk))     /* UART receive data available flag */
000002  4c0b              LDR      r4,|L8.48|
000004  69e0              LDR      r0,[r4,#0x1c]
000006  f4105f88          TST      r0,#0x1100
00000a  d102              BNE      |L8.18|
00000c  e004              B        |L8.24|
                  |L8.14|
;;;220        {
;;;221            while(UART_GET_RX_EMPTY(UART0) == 0)
;;;222            {
;;;223    			UARTx_Process();
00000e  f7fffffe          BL       UARTx_Process
                  |L8.18|
000012  69a1              LDR      r1,[r4,#0x18]         ;221
000014  0449              LSLS     r1,r1,#17             ;221
000016  d5fa              BPL      |L8.14|
                  |L8.24|
;;;224            }
;;;225        }
;;;226    
;;;227        if(UART0->FIFOSTS & (UART_FIFOSTS_BIF_Msk | UART_FIFOSTS_FEF_Msk | UART_FIFOSTS_PEF_Msk | UART_FIFOSTS_RXOVIF_Msk))
000018  69a1              LDR      r1,[r4,#0x18]
00001a  4620              MOV      r0,r4
00001c  f0110f71          TST      r1,#0x71
000020  d005              BEQ      |L8.46|
;;;228        {
;;;229            UART_ClearIntFlag(UART0, (UART_INTSTS_RLSINT_Msk| UART_INTSTS_BUFERRINT_Msk));
000022  e8bd4010          POP      {r4,lr}
000026  f44f5110          MOV      r1,#0x2400
00002a  f7ffbffe          B.W      UART_ClearIntFlag
                  |L8.46|
;;;230        }	
;;;231    }
00002e  bd10              POP      {r4,pc}
;;;232    
                          ENDP

                  |L8.48|
                          DCD      0x40070000

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;232    
;;;233    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;234    {
;;;235        SYS_ResetModule(UART0_RST);
000002  481e              LDR      r0,|L9.124|
000004  f7fffffe          BL       SYS_ResetModule
;;;236    
;;;237        /* Configure UART0 and set UART0 baud rate */
;;;238        UART_Open(UART0, 115200);
000008  4c1d              LDR      r4,|L9.128|
00000a  f44f31e1          MOV      r1,#0x1c200
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       UART_Open
;;;239    
;;;240    	/* Set UART receive time-out */
;;;241    	UART_SetTimeoutCnt(UART0, 20);
000014  2114              MOVS     r1,#0x14
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       UART_SetTimeoutCnt
;;;242    
;;;243    	UART0->FIFO &= ~UART_FIFO_RFITL_4BYTES;
00001c  68a0              LDR      r0,[r4,#8]
00001e  f0200010          BIC      r0,r0,#0x10
000022  60a0              STR      r0,[r4,#8]
;;;244    	UART0->FIFO |= UART_FIFO_RFITL_8BYTES;
000024  68a0              LDR      r0,[r4,#8]
000026  f0400020          ORR      r0,r0,#0x20
00002a  60a0              STR      r0,[r4,#8]
;;;245    
;;;246    	/* Enable UART Interrupt - */
;;;247    	UART_ENABLE_INT(UART0, UART_INTEN_RDAIEN_Msk | UART_INTEN_TOCNTEN_Msk | UART_INTEN_RXTOIEN_Msk);
00002c  6860              LDR      r0,[r4,#4]
00002e  f6400111          MOV      r1,#0x811
000032  4308              ORRS     r0,r0,r1
000034  6060              STR      r0,[r4,#4]
;;;248    	
;;;249    	NVIC_EnableIRQ(UART0_IRQn);
000036  2024              MOVS     r0,#0x24
000038  f7fffffe          BL       NVIC_EnableIRQ
;;;250    
;;;251    	#if (_debug_log_UART_ == 1)	//debug
;;;252    	printf("\r\napplication:CLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
00003c  f7fffffe          BL       CLK_GetCPUFreq
000040  4601              MOV      r1,r0
000042  a010              ADR      r0,|L9.132|
000044  f7fffffe          BL       __2printf
;;;253    	printf("application:CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
000048  f7fffffe          BL       CLK_GetHXTFreq
00004c  4601              MOV      r1,r0
00004e  a017              ADR      r0,|L9.172|
000050  f7fffffe          BL       __2printf
;;;254    	printf("application:CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
000054  f7fffffe          BL       CLK_GetLXTFreq
000058  4601              MOV      r1,r0
00005a  a01d              ADR      r0,|L9.208|
00005c  f7fffffe          BL       __2printf
;;;255    	printf("application:CLK_GetPCLK0Freq : %8d\r\n",CLK_GetPCLK0Freq());
000060  f7fffffe          BL       CLK_GetPCLK0Freq
000064  4601              MOV      r1,r0
000066  a023              ADR      r0,|L9.244|
000068  f7fffffe          BL       __2printf
;;;256    	printf("application:CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());	
00006c  f7fffffe          BL       CLK_GetPCLK1Freq
000070  4601              MOV      r1,r0
000072  e8bd4010          POP      {r4,lr}
000076  a029              ADR      r0,|L9.284|
000078  f7ffbffe          B.W      __2printf
;;;257    
;;;258    //    printf("Product ID 0x%8X\n", SYS->PDID);
;;;259    	
;;;260    	#endif
;;;261    }
;;;262    
                          ENDP

                  |L9.124|
                          DCD      0x04000010
                  |L9.128|
                          DCD      0x40070000
                  |L9.132|
000084  0d0a6170          DCB      "\r\napplication:CLK_GetCPUFreq : %8d\r\n",0
000088  706c6963
00008c  6174696f
000090  6e3a434c
000094  4b5f4765
000098  74435055
00009c  46726571
0000a0  203a2025
0000a4  38640d0a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L9.172|
0000ac  6170706c          DCB      "application:CLK_GetHXTFreq : %8d\r\n",0
0000b0  69636174
0000b4  696f6e3a
0000b8  434c4b5f
0000bc  47657448
0000c0  58544672
0000c4  6571203a
0000c8  20253864
0000cc  0d0a00  
0000cf  00                DCB      0
                  |L9.208|
0000d0  6170706c          DCB      "application:CLK_GetLXTFreq : %8d\r\n",0
0000d4  69636174
0000d8  696f6e3a
0000dc  434c4b5f
0000e0  4765744c
0000e4  58544672
0000e8  6571203a
0000ec  20253864
0000f0  0d0a00  
0000f3  00                DCB      0
                  |L9.244|
0000f4  6170706c          DCB      "application:CLK_GetPCLK0Freq : %8d\r\n",0
0000f8  69636174
0000fc  696f6e3a
000100  434c4b5f
000104  47657450
000108  434c4b30
00010c  46726571
000110  203a2025
000114  38640d0a
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L9.284|
00011c  6170706c          DCB      "application:CLK_GetPCLK1Freq : %8d\r\n",0
000120  69636174
000124  696f6e3a
000128  434c4b5f
00012c  47657450
000130  434c4b31
000134  46726571
000138  203a2025
00013c  38640d0a
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.UARTx_Process||, CODE, READONLY, ALIGN=2

                  UARTx_Process PROC
;;;175    
;;;176    void UARTx_Process(void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178    	uint8_t res = 0;
;;;179    	res = UART_READ(UART0);
000002  4c16              LDR      r4,|L10.92|
000004  6820              LDR      r0,[r4,#0]
000006  b2c0              UXTB     r0,r0
;;;180    
;;;181    	if (res == 'x' || res == 'X')
000008  2878              CMP      r0,#0x78
00000a  d014              BEQ      |L10.54|
00000c  2858              CMP      r0,#0x58
00000e  d012              BEQ      |L10.54|
;;;182    	{
;;;183    		NVIC_SystemReset();
;;;184    	}
;;;185    
;;;186    	if (res > 0x7F)
000010  287f              CMP      r0,#0x7f
000012  d904              BLS      |L10.30|
;;;187    	{
;;;188    		printf("invalid command\r\n");
000014  e8bd4010          POP      {r4,lr}
000018  a011              ADR      r0,|L10.96|
00001a  f7ffbffe          B.W      __2printf
                  |L10.30|
;;;189    	}
;;;190    	else
;;;191    	{
;;;192    		switch(res)
00001e  285a              CMP      r0,#0x5a
000020  d009              BEQ      |L10.54|
000022  dc04              BGT      |L10.46|
000024  2831              CMP      r0,#0x31
000026  d008              BEQ      |L10.58|
000028  2858              CMP      r0,#0x58
00002a  d115              BNE      |L10.88|
00002c  e003              B        |L10.54|
                  |L10.46|
00002e  2878              CMP      r0,#0x78
000030  d001              BEQ      |L10.54|
000032  287a              CMP      r0,#0x7a
000034  d110              BNE      |L10.88|
                  |L10.54|
;;;193    		{
;;;194    			case '1':
;;;195    
;;;196    				rtc_write_magic_tag(0xA5);
;;;197    
;;;198    				printf("Perform CHIP_RST to enter BOOTLOADER\r\n");
;;;199    				while(!UART_IS_TX_EMPTY(UART0));
;;;200    
;;;201    				// Reset chip to enter bootloader
;;;202    				SYS_UnlockReg();
;;;203    				SYS_ResetChip();			
;;;204    				break;
;;;205    
;;;206    			case 'X':
;;;207    			case 'x':
;;;208    			case 'Z':
;;;209    			case 'z':
;;;210    				NVIC_SystemReset();		
000036  f7fffffe          BL       NVIC_SystemReset
                  |L10.58|
00003a  20a5              MOVS     r0,#0xa5              ;196
00003c  f7fffffe          BL       rtc_write_magic_tag
000040  a00c              ADR      r0,|L10.116|
000042  f7fffffe          BL       __2printf
                  |L10.70|
000046  69a0              LDR      r0,[r4,#0x18]         ;199
000048  00c0              LSLS     r0,r0,#3              ;199
00004a  d5fc              BPL      |L10.70|
00004c  f7fffffe          BL       SYS_UnlockReg
000050  e8bd4010          POP      {r4,lr}               ;203
000054  f7ffbffe          B.W      SYS_ResetChip
                  |L10.88|
;;;211    				break;
;;;212    		}
;;;213    	}
;;;214    }
000058  bd10              POP      {r4,pc}
;;;215    
                          ENDP

00005a  0000              DCW      0x0000
                  |L10.92|
                          DCD      0x40070000
                  |L10.96|
000060  696e7661          DCB      "invalid command\r\n",0
000064  6c696420
000068  636f6d6d
00006c  616e640d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L10.116|
000074  50657266          DCB      "Perform CHIP_RST to enter BOOTLOADER\r\n",0
000078  6f726d20
00007c  43484950
000080  5f525354
000084  20746f20
000088  656e7465
00008c  7220424f
000090  4f544c4f
000094  41444552
000098  0d0a00  
00009b  00                DCB      0

                          AREA ||i.compare_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  compare_buffer PROC
;;;34     
;;;35     void compare_buffer(uint8_t *src, uint8_t *des, int nBytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;36     {
000004  4616              MOV      r6,r2
000006  460f              MOV      r7,r1
000008  4680              MOV      r8,r0
;;;37         uint16_t i = 0;	
00000a  2400              MOVS     r4,#0
;;;38     	
;;;39         for (i = 0; i < nBytes; i++)
;;;40         {
;;;41             if (src[i] != des[i])
;;;42             {
;;;43                 printf("error idx : %4d : 0x%2X , 0x%2X\r\n", i , src[i],des[i]);
;;;44     			set_flag(flag_error , ENABLE);
00000c  4d0f              LDR      r5,|L11.76|
00000e  e00e              B        |L11.46|
                  |L11.16|
000010  f8182004          LDRB     r2,[r8,r4]            ;41
000014  5d3b              LDRB     r3,[r7,r4]            ;41
000016  429a              CMP      r2,r3                 ;41
000018  d007              BEQ      |L11.42|
00001a  4621              MOV      r1,r4                 ;43
00001c  a00c              ADR      r0,|L11.80|
00001e  f7fffffe          BL       __2printf
000022  6828              LDR      r0,[r5,#0]  ; BitFlag
000024  f0400002          ORR      r0,r0,#2
000028  6028              STR      r0,[r5,#0]  ; BitFlag
                  |L11.42|
00002a  1c64              ADDS     r4,r4,#1
00002c  b2a4              UXTH     r4,r4                 ;39
                  |L11.46|
00002e  42b4              CMP      r4,r6                 ;39
000030  dbee              BLT      |L11.16|
;;;45             }
;;;46         }
;;;47     
;;;48     	if (!is_flag_set(flag_error))
000032  6828              LDR      r0,[r5,#0]  ; BitFlag
000034  0780              LSLS     r0,r0,#30
000036  d407              BMI      |L11.72|
;;;49     	{
;;;50         	printf("%s finish \r\n" , __FUNCTION__);	
000038  490e              LDR      r1,|L11.116|
00003a  a00f              ADR      r0,|L11.120|
00003c  f7fffffe          BL       __2printf
;;;51     		set_flag(flag_error , DISABLE);
000040  6828              LDR      r0,[r5,#0]  ; BitFlag
000042  f0200002          BIC      r0,r0,#2
000046  6028              STR      r0,[r5,#0]  ; BitFlag
                  |L11.72|
;;;52     	}
;;;53     
;;;54     }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;55     
                          ENDP

                  |L11.76|
                          DCD      ||.data||
                  |L11.80|
000050  6572726f          DCB      "error idx : %4d : 0x%2X , 0x%2X\r\n",0
000054  72206964
000058  78203a20
00005c  25346420
000060  3a203078
000064  25325820
000068  2c203078
00006c  2532580d
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0
                  |L11.116|
                          DCD      ||.constdata||
                  |L11.120|
000078  25732066          DCB      "%s finish \r\n",0
00007c  696e6973
000080  68200d0a
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.copy_buffer||, CODE, READONLY, ALIGN=1

                  copy_buffer PROC
;;;71     
;;;72     void copy_buffer(void *dest, void *src, unsigned int size)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         uint8_t *pu8Src, *pu8Dest;
;;;75         unsigned int i;
;;;76         
;;;77         pu8Dest = (uint8_t *)dest;
;;;78         pu8Src  = (uint8_t *)src;
;;;79     
;;;80     
;;;81     	#if 0
;;;82     	  while (size--)
;;;83     	    *pu8Dest++ = *pu8Src++;
;;;84     	#else
;;;85         for (i = 0; i < size; i++)
000002  2300              MOVS     r3,#0
000004  e002              B        |L12.12|
                  |L12.6|
;;;86             pu8Dest[i] = pu8Src[i];
000006  5ccc              LDRB     r4,[r1,r3]
000008  54c4              STRB     r4,[r0,r3]
00000a  1c5b              ADDS     r3,r3,#1
                  |L12.12|
00000c  4293              CMP      r3,r2                 ;85
00000e  d3fa              BCC      |L12.6|
;;;87     	#endif
;;;88     }
000010  bd10              POP      {r4,pc}
;;;89     
                          ENDP


                          AREA ||i.dump_buffer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  dump_buffer PROC
;;;89     
;;;90     void dump_buffer(uint8_t *pucBuff, int nBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;91     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;92         uint16_t i = 0;
000006  2400              MOVS     r4,#0
;;;93         
;;;94         printf("dump_buffer : %2d\r\n" , nBytes);    
000008  a00b              ADR      r0,|L13.56|
00000a  f7fffffe          BL       __2printf
;;;95         for (i = 0 ; i < nBytes ; i++)
00000e  e00c              B        |L13.42|
                  |L13.16|
;;;96         {
;;;97             printf("0x%2X," , pucBuff[i]);
000010  5d31              LDRB     r1,[r6,r4]
000012  a00e              ADR      r0,|L13.76|
000014  f7fffffe          BL       __2printf
;;;98             if ((i+1)%8 ==0)
000018  0760              LSLS     r0,r4,#29
00001a  f1b04f60          CMP      r0,#0xe0000000
00001e  d102              BNE      |L13.38|
;;;99             {
;;;100                printf("\r\n");
000020  a00c              ADR      r0,|L13.84|
000022  f7fffffe          BL       __2printf
                  |L13.38|
000026  1c64              ADDS     r4,r4,#1
000028  b2a4              UXTH     r4,r4                 ;95
                  |L13.42|
00002a  42ac              CMP      r4,r5                 ;95
00002c  dbf0              BLT      |L13.16|
;;;101            }            
;;;102        }
;;;103        printf("\r\n\r\n");
00002e  e8bd4070          POP      {r4-r6,lr}
000032  a009              ADR      r0,|L13.88|
000034  f7ffbffe          B.W      __2printf
;;;104    }
;;;105    
                          ENDP

                  |L13.56|
000038  64756d70          DCB      "dump_buffer : %2d\r\n",0
00003c  5f627566
000040  66657220
000044  3a202532
000048  640d0a00
                  |L13.76|
00004c  30782532          DCB      "0x%2X,",0
000050  582c00  
000053  00                DCB      0
                  |L13.84|
000054  0d0a00            DCB      "\r\n",0
000057  00                DCB      0
                  |L13.88|
000058  0d0a0d0a          DCB      "\r\n\r\n",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.dump_buffer_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_c
                          REQUIRE _printf_str
                  dump_buffer_hex PROC
;;;105    
;;;106    void  dump_buffer_hex(uint8_t *pucBuff, int nBytes)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;107    {
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;108        int     nIdx, i;
;;;109    
;;;110        nIdx = 0;
000008  2500              MOVS     r5,#0
00000a  e025              B        |L14.88|
                  |L14.12|
;;;111        while (nBytes > 0)
;;;112        {
;;;113            printf("0x%04X  ", nIdx);
00000c  4629              MOV      r1,r5
00000e  a016              ADR      r0,|L14.104|
000010  f7fffffe          BL       __2printf
;;;114            for (i = 0; i < 16; i++)
000014  2400              MOVS     r4,#0
                  |L14.22|
;;;115                printf("%02X ", pucBuff[nIdx + i]);
000016  1928              ADDS     r0,r5,r4
000018  5c39              LDRB     r1,[r7,r0]
00001a  a016              ADR      r0,|L14.116|
00001c  f7fffffe          BL       __2printf
000020  1c64              ADDS     r4,r4,#1
000022  2c10              CMP      r4,#0x10              ;114
000024  dbf7              BLT      |L14.22|
;;;116            printf("  ");
000026  a015              ADR      r0,|L14.124|
000028  f7fffffe          BL       __2printf
;;;117            for (i = 0; i < 16; i++)
00002c  2400              MOVS     r4,#0
                  |L14.46|
;;;118            {
;;;119                if ((pucBuff[nIdx + i] >= 0x20) && (pucBuff[nIdx + i] < 127))
00002e  1928              ADDS     r0,r5,r4
000030  5c39              LDRB     r1,[r7,r0]
000032  f1a10020          SUB      r0,r1,#0x20
000036  285f              CMP      r0,#0x5f
000038  d203              BCS      |L14.66|
;;;120                    printf("%c", pucBuff[nIdx + i]);
00003a  a011              ADR      r0,|L14.128|
00003c  f7fffffe          BL       __2printf
000040  e002              B        |L14.72|
                  |L14.66|
;;;121                else
;;;122                    printf(".");
000042  a010              ADR      r0,|L14.132|
000044  f7fffffe          BL       __2printf
                  |L14.72|
000048  1c64              ADDS     r4,r4,#1
00004a  1e76              SUBS     r6,r6,#1
00004c  2c10              CMP      r4,#0x10              ;117
00004e  dbee              BLT      |L14.46|
;;;123                nBytes--;
;;;124            }
;;;125            nIdx += 16;
;;;126            printf("\n");
000050  a00d              ADR      r0,|L14.136|
000052  3510              ADDS     r5,r5,#0x10
000054  f7fffffe          BL       __2printf
                  |L14.88|
000058  2e00              CMP      r6,#0                 ;111
00005a  dcd7              BGT      |L14.12|
;;;127        }
;;;128        printf("\n");
00005c  e8bd41f0          POP      {r4-r8,lr}
000060  a009              ADR      r0,|L14.136|
000062  f7ffbffe          B.W      __2printf
;;;129    }
;;;130    
                          ENDP

000066  0000              DCW      0x0000
                  |L14.104|
000068  30782530          DCB      "0x%04X  ",0
00006c  34582020
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L14.116|
000074  25303258          DCB      "%02X ",0
000078  2000    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L14.124|
00007c  202000            DCB      "  ",0
00007f  00                DCB      0
                  |L14.128|
000080  256300            DCB      "%c",0
000083  00                DCB      0
                  |L14.132|
000084  2e00              DCB      ".",0
000086  00                DCB      0
000087  00                DCB      0
                  |L14.136|
000088  0a00              DCB      "\n",0
00008a  00                DCB      0
00008b  00                DCB      0

                          AREA ||i.get_tick||, CODE, READONLY, ALIGN=2

                  get_tick PROC
;;;24     
;;;25     uint32_t get_tick(void)
000000  4801              LDR      r0,|L15.8|
;;;26     {
;;;27     	return (counter_tick);
000002  6840              LDR      r0,[r0,#4]  ; counter_tick
;;;28     }
000004  4770              BX       lr
;;;29     
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      ||.data||

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;331    
;;;332    int main()
000000  f7fffffe          BL       SYS_Init
;;;333    {
;;;334        SYS_Init();
;;;335    
;;;336    	UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;337    	Custom_Init();	
000008  f7fffffe          BL       Custom_Init
;;;338    	TIMER1_Init();
00000c  f7fffffe          BL       TIMER1_Init
                  |L16.16|
;;;339    
;;;340    
;;;341        /* Got no where to go, just loop forever */
;;;342        while(1)
000010  e7fe              B        |L16.16|
;;;343        {
;;;344    
;;;345    
;;;346        }
;;;347    }
;;;348    
                          ENDP


                          AREA ||i.reset_buffer||, CODE, READONLY, ALIGN=1

                  reset_buffer PROC
;;;55     
;;;56     void reset_buffer(void *dest, unsigned int val, unsigned int size)
000000  b2c9              UXTB     r1,r1
;;;57     {
000002  e001              B        |L17.8|
                  |L17.4|
;;;58         uint8_t *pu8Dest;
;;;59     //    unsigned int i;
;;;60         
;;;61         pu8Dest = (uint8_t *)dest;
;;;62     
;;;63     	#if 1
;;;64     	while (size-- > 0)
;;;65     		*pu8Dest++ = val;
000004  f8001b01          STRB     r1,[r0],#1
                  |L17.8|
000008  1e52              SUBS     r2,r2,#1
00000a  d2fb              BCS      |L17.4|
;;;66     	#else
;;;67     	memset(pu8Dest, val, size * (sizeof(pu8Dest[0]) ));
;;;68     	#endif
;;;69     	
;;;70     }
00000c  4770              BX       lr
;;;71     
                          ENDP


                          AREA ||i.rtc_write_magic_tag||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  rtc_write_magic_tag PROC
;;;131    
;;;132    void rtc_write_magic_tag(uint8_t tag)
000000  b510              PUSH     {r4,lr}
;;;133    {
000002  4604              MOV      r4,r0
;;;134        RTC_EnableSpareAccess();
000004  f7fffffe          BL       RTC_EnableSpareAccess
;;;135    
;;;136        RTC->RWEN = RTC_WRITE_KEY;
000008  4a06              LDR      r2,|L18.36|
00000a  f64a1065          MOV      r0,#0xa965
00000e  6050              STR      r0,[r2,#4]
                  |L18.16|
;;;137        while(!(RTC->RWEN & RTC_RWEN_RWENF_Msk));
000010  6853              LDR      r3,[r2,#4]
000012  03db              LSLS     r3,r3,#15
000014  d5fc              BPL      |L18.16|
;;;138        
;;;139        RTC_WRITE_SPARE_REGISTER(0, tag);
000016  6414              STR      r4,[r2,#0x40]
;;;140        
;;;141        printf("Write MagicTag <0x%02X>\r\n", tag);
000018  4621              MOV      r1,r4
00001a  e8bd4010          POP      {r4,lr}
00001e  a002              ADR      r0,|L18.40|
000020  f7ffbffe          B.W      __2printf
;;;142    }
;;;143    
                          ENDP

                  |L18.36|
                          DCD      0x40041000
                  |L18.40|
000028  57726974          DCB      "Write MagicTag <0x%02X>\r\n",0
00002c  65204d61
000030  67696354
000034  6167203c
000038  30782530
00003c  32583e0d
000040  0a00    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.set_tick||, CODE, READONLY, ALIGN=2

                  set_tick PROC
;;;29     
;;;30     void set_tick(uint32_t t)
000000  4901              LDR      r1,|L19.8|
;;;31     {
;;;32     	counter_tick = t;
000002  6048              STR      r0,[r1,#4]  ; counter_tick
;;;33     }
000004  4770              BX       lr
;;;34     
                          ENDP

000006  0000              DCW      0x0000
                  |L19.8|
                          DCD      ||.data||

                          AREA ||i.tick_counter||, CODE, READONLY, ALIGN=2

                  tick_counter PROC
;;;19     
;;;20     void tick_counter(void)
000000  4802              LDR      r0,|L20.12|
;;;21     {
;;;22     	counter_tick++;
000002  6841              LDR      r1,[r0,#4]  ; counter_tick
000004  1c49              ADDS     r1,r1,#1
000006  6041              STR      r1,[r0,#4]  ; counter_tick
;;;23     }
000008  4770              BX       lr
;;;24     
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      ||.data||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000004  6172655f          DCB      0x61,0x72,0x65,0x5f
000008  62756666          DCB      0x62,0x75,0x66,0x66
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.61|
00000f  54                DCB      0x54
000010  4d52315f          DCB      0x4d,0x52,0x31,0x5f
000014  49525148          DCB      0x49,0x52,0x51,0x48
000018  616e646c          DCB      0x61,0x6e,0x64,0x6c
00001c  657200            DCB      0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  BitFlag
                          DCD      0x00000000
                  counter_tick
                          DCD      0x00000000
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_BitFlag____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____REVSH|
#line 402
|__asm___6_main_c_BitFlag____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_BitFlag____RRX|
#line 587
|__asm___6_main_c_BitFlag____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
